# Generated by Django 3.1.2 on 2020-10-24 01:31

import carb.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('harbor_auth', models.CharField(choices=[('a', 'always allowed'), ('n', 'never allowed'), ('g', 'Google Calendar based')], default='a', max_length=1, verbose_name='harbor access type')),
                ('google_calender_entry_grace_minutes', models.PositiveIntegerField(default=0, help_text='The minutes <strong>before</strong> a scheduled show that the user is allowed to enter the harbor.', verbose_name='harbor entry grace period (minutes)')),
                ('google_calender_exit_grace_minutes', models.PositiveIntegerField(default=0, help_text='The minutes <strong>after</strong> a scheduled show that the user is kicked off the harbor.', verbose_name='harbor exit grace period (minutes)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PrerecordedAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('title', carb.models.TruncatingCharField(blank=True, help_text="If left empty, a title will be generated from the file's metadata.", max_length=255, verbose_name='title')),
                ('file', models.FileField(blank=True, help_text='You can provide either an uploaded audio file or a URL to an external asset.', upload_to='prerecord/', verbose_name='audio file')),
                ('duration', models.DurationField(default=datetime.timedelta(0), verbose_name='Audio duration')),
                ('status', models.CharField(choices=[('-', 'upload pending'), ('u', 'uploaded'), ('q', 'download queued'), ('r', 'download running'), ('f', 'download failed')], default='-', max_length=1, verbose_name='Upload status')),
                ('task_id', models.UUIDField(null=True)),
                ('uploader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploader')),
            ],
            options={
                'verbose_name': 'prerecorded broadcast audio asset',
                'verbose_name_plural': 'prerecorded broadcast audio assets',
            },
        ),
        migrations.CreateModel(
            name='PrerecordedBroadcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('scheduled_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('-', 'pending'), ('q', 'queued'), ('p', 'played'), ('f', 'queuing failed')], default='-', max_length=1)),
                ('task_id', models.UUIDField(null=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='carb.prerecordedasset', verbose_name='audio file')),
            ],
            options={
                'verbose_name': 'prerecorded broadcast',
                'verbose_name_plural': 'prerecorded broadcasts',
                'ordering': ('-scheduled_time',),
            },
        ),
        migrations.CreateModel(
            name='AudioAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('title', carb.models.TruncatingCharField(blank=True, help_text="If left empty, a title will be generated from the file's metadata.", max_length=255, verbose_name='title')),
                ('file', models.FileField(blank=True, help_text='You can provide either an uploaded audio file or a URL to an external asset.', upload_to='prerecord/', verbose_name='audio file')),
                ('duration', models.DurationField(default=datetime.timedelta(0), verbose_name='Audio duration')),
                ('status', models.CharField(choices=[('-', 'upload pending'), ('u', 'uploaded'), ('q', 'download queued'), ('r', 'download running'), ('f', 'download failed')], default='-', max_length=1, verbose_name='Upload status')),
                ('task_id', models.UUIDField(null=True)),
                ('artist', carb.models.TruncatingCharField(blank=True, help_text="If left empty, an artist will be generated from the file's metadata.", max_length=255, verbose_name='artist')),
                ('album', carb.models.TruncatingCharField(blank=True, help_text="If left empty, an album will be generated from the file's metadata.", max_length=255, verbose_name='album')),
                ('uploader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploader')),
            ],
            options={
                'verbose_name': 'playout audio asset',
                'verbose_name_plural': 'playout audio assets',
            },
        ),
        migrations.CreateModel(
            name='GoogleCalendarShowTimes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('show_times', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ranges.DateTimeRangeField(), size=None)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Google Calendar shows',
                'verbose_name_plural': 'Google Calendar shows',
                'order_with_respect_to': 'user',
            },
        ),
    ]

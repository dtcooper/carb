# Generated by Django 3.1.2 on 2020-10-20 01:42

import carb.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('harbor_auth', models.CharField(choices=[('a', 'Always'), ('n', 'Never'), ('g', 'Google Calendar based')], default='a', max_length=1, verbose_name='Harbor access type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PrerecordedAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', carb.models.TruncatingCharField(blank=True, help_text="If left empty, a title will be generated from the file's metadata.", max_length=255, verbose_name='Title')),
                ('file', models.FileField(blank=True, help_text='You can provide either an uploaded audio file or a URL to an external asset.', upload_to='prerecord/', verbose_name='Audio file')),
                ('duration', models.DurationField(default=datetime.timedelta(0), verbose_name='Audio duration')),
                ('file_status', models.CharField(choices=[('-', 'Upload pending'), ('u', 'Uploaded'), ('q', 'Download queued'), ('r', 'Download running'), ('f', 'Download failed')], default='-', max_length=1, verbose_name='Upload status')),
                ('task_id', models.UUIDField(null=True)),
                ('uploader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Uploader')),
            ],
            options={
                'verbose_name': 'Prerecorded Broadcast Audio Asset',
                'verbose_name_plural': 'Prerecorded Broadcast Audio Assets',
            },
        ),
        migrations.CreateModel(
            name='PrerecordedBroadcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('task_id', models.UUIDField(null=True)),
                ('play_status', models.CharField(choices=[('-', 'Pending'), ('q', 'Queued'), ('p', 'Played'), ('f', 'Queuing failed')], default='-', max_length=1)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='carb.prerecordedasset', verbose_name='Audio file')),
            ],
            options={
                'verbose_name': 'Prerecorded Broadcast',
                'verbose_name_plural': 'Prerecorded Broadcasts',
                'ordering': ('-scheduled_time',),
            },
        ),
        migrations.CreateModel(
            name='GoogleCalendarShow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', carb.models.TruncatingCharField(max_length=1024, unique=True)),
                ('title', carb.models.TruncatingCharField(max_length=255, verbose_name='Title')),
                ('start', models.DateTimeField(verbose_name='Start time')),
                ('end', models.DateTimeField(verbose_name='End time')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Authorized users')),
            ],
            options={
                'verbose_name': 'Google Calendar Show',
                'verbose_name_plural': 'Google Calendar Shows',
            },
        ),
        migrations.CreateModel(
            name='AudioAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', carb.models.TruncatingCharField(blank=True, help_text="If left empty, a title will be generated from the file's metadata.", max_length=255, verbose_name='Title')),
                ('file', models.FileField(blank=True, help_text='You can provide either an uploaded audio file or a URL to an external asset.', upload_to='prerecord/', verbose_name='Audio file')),
                ('duration', models.DurationField(default=datetime.timedelta(0), verbose_name='Audio duration')),
                ('file_status', models.CharField(choices=[('-', 'Upload pending'), ('u', 'Uploaded'), ('q', 'Download queued'), ('r', 'Download running'), ('f', 'Download failed')], default='-', max_length=1, verbose_name='Upload status')),
                ('task_id', models.UUIDField(null=True)),
                ('artist', carb.models.TruncatingCharField(blank=True, help_text="If left empty, an artist will be generated from the file's metadata.", max_length=255, verbose_name='Artist')),
                ('album', carb.models.TruncatingCharField(blank=True, help_text="If left empty, an album will be generated from the file's metadata.", max_length=255, verbose_name='Album')),
                ('uploader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Uploader')),
            ],
            options={
                'verbose_name': 'Playout Audio Asset',
                'verbose_name_plural': 'Playout Audio Assets',
            },
        ),
    ]

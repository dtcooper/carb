{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crazy Arms Radio Backend \u00b6 Crazy Arms is under active development Crazy Arms is currently under active development, however you can preview things right now. This documentation is incomplete, is missing sections, and may include incorrect information until the first release. Crazy Arms Radio Backend is a flexible and fully featured Internet radio back-end written from the ground up. It's specifically written after its author built a few fully decentralized online radio stations with varying types of scheduling and finding no existing product fit some common needs out of the box. If you're an technical user or a systems administrator wanting to install Crazy Arms, head over to the installation instructions . Audio Infrastructure Overview \u00b6 Sources, Harbor, and Upstreams Explained \u00b6 The Harbor \u00b6 The main audio component of Crazy Arms is called the Harbor. It takes care of choosing what to broadcast based on some simple rules. In a sense, it's a stream picker. Think of the Harbor as a robot sitting at an imaginary console, deciding what play and when, using its crazy arms turning volume knobs, and pushin' and pullin' on faders at exactly the right moment. (And just like that, we arrive at the reason for the name! Okay, it's not the only reason... ) Sources \u00b6 The harbor has several input sources. A source is any audio input feeding into the harbor. In our robot at the console example above, think of sources as input channels on the console. Out of the box examples include the AutoDJ , scheduled, pre-recorded broadcasts , and live DJs streaming with Icecast 2 , RTMP (experimental), or a Zoom room . Each input is assigned a priority, and the source with the highest priority that is active will be what the robot chooses to play. We call this concept priority-based streaming. Active and Inactive Sources, Silence Detection When a source goes from inactive to active, the Harbor will smoothly fade to it. What exactly constitutes active and inactive depends on the source? For example, in the case of the AutoDJ source, Crazy Arms will always have music to play so that source is always considered to be always active. (You did upload music, right?) The AutoDJ has low priority so it's sort of an always-on default. On the other hand, take a \"live source\" like a live DJ streaming using Icecast 2. When the DJ connects and starts streaming, that source is active. That's not the whole story. The harbor uses silence detection for live sources. This means if a live DJ is connected and streaming, but is broadcasting silence the source is considered inactive. Suppose their microphone isn't working or a fader on their mixer is accidentally pulled down. Or maybe they forgot to disconnect. We wouldn't want your station silent, would we? In short, if a live source is connected but silent, it will be considered inactive. The amount of silence before fading is configurable but defaults to 15 seconds. The theory behind this feature is part of the Idiot-Tolerant\u2122 DJing philosophy of Crazy Arms. Upstream Servers \u00b6 The last thing you need to know about are we Crazy Arms called upstream servers. These are simply places where your station is being broadcast to, usually Icecast 2 servers. That's where listeners connect to. They're the final output of the Harbor. Some radio automation suites call these \"encoders.\" These might be remote partners like iHeart or SiriusXM , a streaming provider like StreamGuys or your own infrastructure. You can configure as many upstream servers as you like. For convenience and to kickstart your station, Crazy Arms bundles a local Icecast 2 server it streams MP3 at 128kbps to by default, using the popular icecast-kh branch. Harbor Flow Diagram \u00b6 Now that you understand the basic concepts with the Harbor, here's what it looks like. Harbor Flow Diagram flowchart LR subgraph sources [\"Priority-Based Sources\"] prerecord(\"1. Pre-recorded Broadcast<br>(Scheduled, long-format shows)\") subgraph live-sources [\"Live Sources (Silence Detection)\"] dj(\"2. Live DJ<br>(Icecast 2, RTMP)\") zoom(\"3. Live Zoom Room<br>(optional)\") end autodj(\"4. AutoDJ<br>(optional)\") failsafe(5. Failsafe Audio File) end harbor((\"Harbor<br>(Intelligent stream picker)\")) prerecord -->|highest priority| harbor dj --> harbor zoom --> harbor autodj --> harbor failsafe -->|lowest priority| harbor subgraph upstreams [\"Upstream Servers\"] icecast1(\"Local Icecast 2 Server (mp3)\") icecast2(\"External Icecast 2 Server (aac)\") icecastOthers(\"Other Icecast 2 Servers\") end harbor --> icecast1 harbor --> icecast2 harbor --> icecastOthers listeners((\"Listeners\")) icecast1 --> listeners icecast2 --> listeners icecastOthers --> listeners Sources Details \u00b6 Priority Source Silence Detection Description Example Optional 1 Pre-recorded Broadcasts Audio uploaded into the admin site, then scheduled for airplay at a specific time. MP3 of a two hour show called Friday Night Mix uploaded on Thursday and scheduled to air Friday from 9:00pm to 11:00pm. 2 Live DJ Live DJ streaming using either Icecast 2 or RMTP. Jane uses Audio HiJack from her laptop to broadcast a live two hour show Wednesday at 6:00pm. 3 Zoom Room Live streaming using a Zoom room. John starts a Zoom room, enters the room link into Crazy Arms web interface and starts a one hour broadcast at 10:00am on Saturday. 4 AutoDJ Audio uploaded into the admin site that plays at random. Sally uploads the entire Ray Price catalog to the AutoDJ through the admin site so music from that plays except during the above shows. 5 Failsafe Audio Audio that plays when nothing else is available. (You'll likely only to hear this if the AutoDJ is disabled.) Bob disabled the AutoDJ for the radio station. When no one is streaming a live show, the failsafe track plays on repeat. Listeners are annoyed! Customization \u00b6 Behind the scenes, the Harbor is a highly customizable script, implemented in Liquidsoap . Technical users can add additional sources or program the Harbor to do all sorts of novel things. This level of customization, while for advanced used, is an important feature of Crazy Arms. Ever station is and its use case are different, so there may be no one size fits all solution for everytone. Features At a Glance \u00b6 Priority-based Streaming Crazy Arms operates on the concept of priority. This means it chooses the source (audio input) that is streaming, properly operating, or online with the highest priority. For example, a live DJ takes priority over the AutoDJ. See more info on this concept below . Live scheduling via Google Calendar Scheduling of live DJs using Google Calendar. An invite to a calendar event means a DJ is authorized to play. Simple as that. Rather than re-invent the wheel, Google Calendar was chosen because of its wide adoption and east of use \u2014 and implementation of recurring events.. Your web front-end can integrate with that, rather than a complex, custom API. Scheduled playout of long-format audio files, ie prerecorded shows A major use case is taking long-format audio files (ie two hours) and scheduling them to play at specific times, superseding the AutoDJ. Broadcasting for non-technical users with Zoom This is implemented with Zoom for Linux using a Docker container. A \"runner\" bash script does its best to connect to a user's Zoom room and listen in. It's inherently a bit brittle, but can be troubleshooted somewhat easily in a web browser running noVNC by an admin. Idiot-Tolerant\u2122 DJing If a live DJ or Zoom room is broadcasting silence, Crazy Arms picks another source to stream from. Completely Docker -ized Easy development and easy deployment using docker-compose . Useful and informative station administration and status tools. Leveraging Django 's admin interface much of Crazy Arms can be managed by administrators (or users with the necessary permissions). A status page is also provided that uses server-sent events in which the Harbor service script communicates directly with your web browser in real-time. Uploading audio from varied sources Uploading of audio files from sources like SoundCloud , Mixcloud , or YouTube are supported. Just enter a URL and the Crazy Arms downloads and processes your audio file. This utilizes the wonderful youtube-dlc tool and supports literally thousands of sites ! An AutoDJ that plays blocks of advertisements and station IDs (stop sets) This feature can optionally be enabled in the \"Server Settings > Configuration\" section. Fine-grained user permission structure. If a user is not an administrator, there are several permission groups to allow them some administrative privileges. Accessible Logs Less technical users can see server logs without ssh or command-line knowledge to help troubleshoot. Maybe a DJ got their password wrong or tried to broadcast at the wrong time? Streaming Customization At your own risk, you can modify Liquidsoap Harbor scripts. This gives pretty high flexibility for various use cases. RTMP Support (Experimental) There's experimental support for RTMP, so anyone who's familiar with tools like Open Source Broadcaster (OBS) can stream to the harbor. Of course, video is discarded. Non-Features \u00b6 The following are non-features of Crazy Arms. Front-end Not Included Crazy Arms is designed to be a backend for your radio stream only. A user interface that includes calendars, a fancy stream player, and metadata isn't included. Admin Site Look and Feel The admin site for Crazy Arms has a fairly inflexible look and feel. It's not necessarily a beautiful, easy to use interface but instead meant for somewhat technical users. This is by design and was chosen for ease of programming. The technical reason for why is that we chose to build it on top of Django's admin site module.","title":"Home"},{"location":"#crazy-arms-radio-backend","text":"Crazy Arms is under active development Crazy Arms is currently under active development, however you can preview things right now. This documentation is incomplete, is missing sections, and may include incorrect information until the first release. Crazy Arms Radio Backend is a flexible and fully featured Internet radio back-end written from the ground up. It's specifically written after its author built a few fully decentralized online radio stations with varying types of scheduling and finding no existing product fit some common needs out of the box. If you're an technical user or a systems administrator wanting to install Crazy Arms, head over to the installation instructions .","title":"Crazy Arms Radio Backend"},{"location":"#audio-infrastructure-overview","text":"","title":"Audio Infrastructure Overview"},{"location":"#sources-harbor-and-upstreams-explained","text":"","title":"Sources, Harbor, and Upstreams Explained"},{"location":"#the-harbor","text":"The main audio component of Crazy Arms is called the Harbor. It takes care of choosing what to broadcast based on some simple rules. In a sense, it's a stream picker. Think of the Harbor as a robot sitting at an imaginary console, deciding what play and when, using its crazy arms turning volume knobs, and pushin' and pullin' on faders at exactly the right moment. (And just like that, we arrive at the reason for the name! Okay, it's not the only reason... )","title":"The Harbor"},{"location":"#sources","text":"The harbor has several input sources. A source is any audio input feeding into the harbor. In our robot at the console example above, think of sources as input channels on the console. Out of the box examples include the AutoDJ , scheduled, pre-recorded broadcasts , and live DJs streaming with Icecast 2 , RTMP (experimental), or a Zoom room . Each input is assigned a priority, and the source with the highest priority that is active will be what the robot chooses to play. We call this concept priority-based streaming. Active and Inactive Sources, Silence Detection When a source goes from inactive to active, the Harbor will smoothly fade to it. What exactly constitutes active and inactive depends on the source? For example, in the case of the AutoDJ source, Crazy Arms will always have music to play so that source is always considered to be always active. (You did upload music, right?) The AutoDJ has low priority so it's sort of an always-on default. On the other hand, take a \"live source\" like a live DJ streaming using Icecast 2. When the DJ connects and starts streaming, that source is active. That's not the whole story. The harbor uses silence detection for live sources. This means if a live DJ is connected and streaming, but is broadcasting silence the source is considered inactive. Suppose their microphone isn't working or a fader on their mixer is accidentally pulled down. Or maybe they forgot to disconnect. We wouldn't want your station silent, would we? In short, if a live source is connected but silent, it will be considered inactive. The amount of silence before fading is configurable but defaults to 15 seconds. The theory behind this feature is part of the Idiot-Tolerant\u2122 DJing philosophy of Crazy Arms.","title":"Sources"},{"location":"#upstream-servers","text":"The last thing you need to know about are we Crazy Arms called upstream servers. These are simply places where your station is being broadcast to, usually Icecast 2 servers. That's where listeners connect to. They're the final output of the Harbor. Some radio automation suites call these \"encoders.\" These might be remote partners like iHeart or SiriusXM , a streaming provider like StreamGuys or your own infrastructure. You can configure as many upstream servers as you like. For convenience and to kickstart your station, Crazy Arms bundles a local Icecast 2 server it streams MP3 at 128kbps to by default, using the popular icecast-kh branch.","title":"Upstream Servers"},{"location":"#harbor-flow-diagram","text":"Now that you understand the basic concepts with the Harbor, here's what it looks like. Harbor Flow Diagram flowchart LR subgraph sources [\"Priority-Based Sources\"] prerecord(\"1. Pre-recorded Broadcast<br>(Scheduled, long-format shows)\") subgraph live-sources [\"Live Sources (Silence Detection)\"] dj(\"2. Live DJ<br>(Icecast 2, RTMP)\") zoom(\"3. Live Zoom Room<br>(optional)\") end autodj(\"4. AutoDJ<br>(optional)\") failsafe(5. Failsafe Audio File) end harbor((\"Harbor<br>(Intelligent stream picker)\")) prerecord -->|highest priority| harbor dj --> harbor zoom --> harbor autodj --> harbor failsafe -->|lowest priority| harbor subgraph upstreams [\"Upstream Servers\"] icecast1(\"Local Icecast 2 Server (mp3)\") icecast2(\"External Icecast 2 Server (aac)\") icecastOthers(\"Other Icecast 2 Servers\") end harbor --> icecast1 harbor --> icecast2 harbor --> icecastOthers listeners((\"Listeners\")) icecast1 --> listeners icecast2 --> listeners icecastOthers --> listeners","title":"Harbor Flow Diagram"},{"location":"#sources-details","text":"Priority Source Silence Detection Description Example Optional 1 Pre-recorded Broadcasts Audio uploaded into the admin site, then scheduled for airplay at a specific time. MP3 of a two hour show called Friday Night Mix uploaded on Thursday and scheduled to air Friday from 9:00pm to 11:00pm. 2 Live DJ Live DJ streaming using either Icecast 2 or RMTP. Jane uses Audio HiJack from her laptop to broadcast a live two hour show Wednesday at 6:00pm. 3 Zoom Room Live streaming using a Zoom room. John starts a Zoom room, enters the room link into Crazy Arms web interface and starts a one hour broadcast at 10:00am on Saturday. 4 AutoDJ Audio uploaded into the admin site that plays at random. Sally uploads the entire Ray Price catalog to the AutoDJ through the admin site so music from that plays except during the above shows. 5 Failsafe Audio Audio that plays when nothing else is available. (You'll likely only to hear this if the AutoDJ is disabled.) Bob disabled the AutoDJ for the radio station. When no one is streaming a live show, the failsafe track plays on repeat. Listeners are annoyed!","title":"Sources Details"},{"location":"#customization","text":"Behind the scenes, the Harbor is a highly customizable script, implemented in Liquidsoap . Technical users can add additional sources or program the Harbor to do all sorts of novel things. This level of customization, while for advanced used, is an important feature of Crazy Arms. Ever station is and its use case are different, so there may be no one size fits all solution for everytone.","title":"Customization"},{"location":"#features-at-a-glance","text":"Priority-based Streaming Crazy Arms operates on the concept of priority. This means it chooses the source (audio input) that is streaming, properly operating, or online with the highest priority. For example, a live DJ takes priority over the AutoDJ. See more info on this concept below . Live scheduling via Google Calendar Scheduling of live DJs using Google Calendar. An invite to a calendar event means a DJ is authorized to play. Simple as that. Rather than re-invent the wheel, Google Calendar was chosen because of its wide adoption and east of use \u2014 and implementation of recurring events.. Your web front-end can integrate with that, rather than a complex, custom API. Scheduled playout of long-format audio files, ie prerecorded shows A major use case is taking long-format audio files (ie two hours) and scheduling them to play at specific times, superseding the AutoDJ. Broadcasting for non-technical users with Zoom This is implemented with Zoom for Linux using a Docker container. A \"runner\" bash script does its best to connect to a user's Zoom room and listen in. It's inherently a bit brittle, but can be troubleshooted somewhat easily in a web browser running noVNC by an admin. Idiot-Tolerant\u2122 DJing If a live DJ or Zoom room is broadcasting silence, Crazy Arms picks another source to stream from. Completely Docker -ized Easy development and easy deployment using docker-compose . Useful and informative station administration and status tools. Leveraging Django 's admin interface much of Crazy Arms can be managed by administrators (or users with the necessary permissions). A status page is also provided that uses server-sent events in which the Harbor service script communicates directly with your web browser in real-time. Uploading audio from varied sources Uploading of audio files from sources like SoundCloud , Mixcloud , or YouTube are supported. Just enter a URL and the Crazy Arms downloads and processes your audio file. This utilizes the wonderful youtube-dlc tool and supports literally thousands of sites ! An AutoDJ that plays blocks of advertisements and station IDs (stop sets) This feature can optionally be enabled in the \"Server Settings > Configuration\" section. Fine-grained user permission structure. If a user is not an administrator, there are several permission groups to allow them some administrative privileges. Accessible Logs Less technical users can see server logs without ssh or command-line knowledge to help troubleshoot. Maybe a DJ got their password wrong or tried to broadcast at the wrong time? Streaming Customization At your own risk, you can modify Liquidsoap Harbor scripts. This gives pretty high flexibility for various use cases. RTMP Support (Experimental) There's experimental support for RTMP, so anyone who's familiar with tools like Open Source Broadcaster (OBS) can stream to the harbor. Of course, video is discarded.","title":"Features At a Glance"},{"location":"#non-features","text":"The following are non-features of Crazy Arms. Front-end Not Included Crazy Arms is designed to be a backend for your radio stream only. A user interface that includes calendars, a fancy stream player, and metadata isn't included. Admin Site Look and Feel The admin site for Crazy Arms has a fairly inflexible look and feel. It's not necessarily a beautiful, easy to use interface but instead meant for somewhat technical users. This is by design and was chosen for ease of programming. The technical reason for why is that we chose to build it on top of Django's admin site module.","title":"Non-Features"},{"location":"glossary/","text":"Glossary of Terms \u00b6 AutoDJ related \u00b6 Audio Asset Audio files, music or other short programming for regular playout. An example would be the track Ray Price - Crazy Arms. Playlist A collection or group of audio assets for regular playout. An example would be a playlist called \"Ray Price - Country Classics\" containing several songs (audio assets). Rotator A collection of stations IDs, advertisements, PSAs, etc of the same category. Examples would be a rotator named \"Advertisements\" or \"Station IDs.\" Rotator Asset A single short audio asset inside of a rotator, ie an individual station ID, advertisement, PSA, etc. Examples would be short clips called \"David's Steel Guitar Ad, 30 seconds.\" (in the \"Advertisements\" rotator) or \"Evening Station ID #1\" (in the \"Station IDs\" rotator). Stop Set A block of stations IDs, PSAs, etc which in turn is really just a block one or more rotators. An example would be a stop set called \"Stop Set #1\" containing three rotators as entries: (1) \"Station IDs,\" (2) \"Advertisements,\" and (3) \"Station IDs.\" NOTE: duplicate rotators is allowed, as in this example. Weight Random weight. TODO document better.","title":"Glossary of Terms"},{"location":"glossary/#glossary-of-terms","text":"","title":"Glossary of Terms"},{"location":"glossary/#autodj-related","text":"Audio Asset Audio files, music or other short programming for regular playout. An example would be the track Ray Price - Crazy Arms. Playlist A collection or group of audio assets for regular playout. An example would be a playlist called \"Ray Price - Country Classics\" containing several songs (audio assets). Rotator A collection of stations IDs, advertisements, PSAs, etc of the same category. Examples would be a rotator named \"Advertisements\" or \"Station IDs.\" Rotator Asset A single short audio asset inside of a rotator, ie an individual station ID, advertisement, PSA, etc. Examples would be short clips called \"David's Steel Guitar Ad, 30 seconds.\" (in the \"Advertisements\" rotator) or \"Evening Station ID #1\" (in the \"Station IDs\" rotator). Stop Set A block of stations IDs, PSAs, etc which in turn is really just a block one or more rotators. An example would be a stop set called \"Stop Set #1\" containing three rotators as entries: (1) \"Station IDs,\" (2) \"Advertisements,\" and (3) \"Station IDs.\" NOTE: duplicate rotators is allowed, as in this example. Weight Random weight. TODO document better.","title":"AutoDJ related"},{"location":"server-setup/","text":"Server Setup \u00b6 This guide is intended for systems administrators only. Installation \u00b6 Quickstart \u00b6 Prerequisites Operating System: Linux or macOS Docker and docker-compose installed. In your terminal clone the repo and start the code. Building the containers may take several minutes. git clone git@github.com:dtcooper/carb.git cd carb ./compose.sh up You'll be asked a few questions about setting up Crazy Arms in your terminal. When building is done, then in your browser go to http://localhost/ . You'll be prompted in the application about setting up your station. If you want a fairly preview of what the AutoDJ has to offer, be sure to select \"Preload the AutoDJ\" when setting up your station. To stop, in your terminal press Ctrl + C . To run Crazy Arms in the background which is useful for deployment do the following, ./compose.sh up -d ./compose.sh down Unit Tests \u00b6 ./compose.sh test # Tear down test dependent containers (postgres and redis) ./compose --test down Upgrading \u00b6 Development \u00b6 Helpful Practices \u00b6 In .env set DEBUG = True overrides.yml ./compose.sh development commands","title":"Server Setup"},{"location":"server-setup/#server-setup","text":"This guide is intended for systems administrators only.","title":"Server Setup"},{"location":"server-setup/#installation","text":"","title":"Installation"},{"location":"server-setup/#quickstart","text":"Prerequisites Operating System: Linux or macOS Docker and docker-compose installed. In your terminal clone the repo and start the code. Building the containers may take several minutes. git clone git@github.com:dtcooper/carb.git cd carb ./compose.sh up You'll be asked a few questions about setting up Crazy Arms in your terminal. When building is done, then in your browser go to http://localhost/ . You'll be prompted in the application about setting up your station. If you want a fairly preview of what the AutoDJ has to offer, be sure to select \"Preload the AutoDJ\" when setting up your station. To stop, in your terminal press Ctrl + C . To run Crazy Arms in the background which is useful for deployment do the following, ./compose.sh up -d ./compose.sh down","title":"Quickstart"},{"location":"server-setup/#unit-tests","text":"./compose.sh test # Tear down test dependent containers (postgres and redis) ./compose --test down","title":"Unit Tests"},{"location":"server-setup/#upgrading","text":"","title":"Upgrading"},{"location":"server-setup/#development","text":"","title":"Development"},{"location":"server-setup/#helpful-practices","text":"In .env set DEBUG = True overrides.yml ./compose.sh development commands","title":"Helpful Practices"},{"location":"about/author-miscellany/","text":"Author & Miscellany \u00b6 David Cooper \u00b6 Crazy Arms Radio Back is written by David Cooper . David is a comedian , radio personality , and podcaster . His background in engineering is from having formerly been a software engineer at Eventbrite and Autodesk . He's staff and on-air talent at BMIR 94.5 FM (Burning Man Information Radio) had stories done on KALW 91.7 FM , and been on a number of stations and shows in the San Francisco Bay Area . He runs an entirely inappropriate weekly, wacky call-in radio show at a coffee shop window :window: in San Francisco described below. NSFW Art Ahead We'd love it if you'd listen to David's weekly comedy show This Is Going Well, I Think, however be warned: it's very, very NSFW. Find out more at www.jew.pizza . (And yes, that domain is real.) Crazy Arms In The Wild \u00b6 David has deployed Crazy Arms to the following online stations, Shouting Fire KTLC The Lost Church Radio 820hz BMIR 94.5 for their 2020 online-only broadcast Support \u00b6 Paid support is available. Reach out to David at david@dtcooper.com . Donations \u00b6 There's about a hundred million other charities that would be a better use of your money, so donate to one of those! The ACLU or the EFF could always use a hand. If you still want to donate against your better judgment, David's Bitcoin address is as follows, 1PoDcAStyJoB7zZz2mny4KjtjiEu8S44ns Final Note \u00b6 ...remember kids, have fun!","title":"Author & Miscellany"},{"location":"about/author-miscellany/#author-miscellany","text":"","title":"Author &amp; Miscellany"},{"location":"about/author-miscellany/#david-cooper","text":"Crazy Arms Radio Back is written by David Cooper . David is a comedian , radio personality , and podcaster . His background in engineering is from having formerly been a software engineer at Eventbrite and Autodesk . He's staff and on-air talent at BMIR 94.5 FM (Burning Man Information Radio) had stories done on KALW 91.7 FM , and been on a number of stations and shows in the San Francisco Bay Area . He runs an entirely inappropriate weekly, wacky call-in radio show at a coffee shop window :window: in San Francisco described below. NSFW Art Ahead We'd love it if you'd listen to David's weekly comedy show This Is Going Well, I Think, however be warned: it's very, very NSFW. Find out more at www.jew.pizza . (And yes, that domain is real.)","title":"David Cooper"},{"location":"about/author-miscellany/#crazy-arms-in-the-wild","text":"David has deployed Crazy Arms to the following online stations, Shouting Fire KTLC The Lost Church Radio 820hz BMIR 94.5 for their 2020 online-only broadcast","title":"Crazy Arms In The Wild"},{"location":"about/author-miscellany/#support","text":"Paid support is available. Reach out to David at david@dtcooper.com .","title":"Support"},{"location":"about/author-miscellany/#donations","text":"There's about a hundred million other charities that would be a better use of your money, so donate to one of those! The ACLU or the EFF could always use a hand. If you still want to donate against your better judgment, David's Bitcoin address is as follows, 1PoDcAStyJoB7zZz2mny4KjtjiEu8S44ns","title":"Donations"},{"location":"about/author-miscellany/#final-note","text":"...remember kids, have fun!","title":"Final Note"},{"location":"about/changelog/","text":"Changelog \u00b6 Version 0.0.1 (YYYY-MM-DD) \u00b6 Initial release. Everything is new!","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-001-yyyy-mm-dd","text":"Initial release. Everything is new!","title":"Version 0.0.1 (YYYY-MM-DD)"},{"location":"about/license/","text":"License \u00b6 MIT License \u00b6 Crazy Arms is free and open source software licensed under the MIT License. You can pretty much do whatever you want it provided you preserve the below notices in your copy or derivative work. Differently licensed works, modifications, and larger works may be distributed under different terms and without source code. MIT License Copyright (c) 2020, David Cooper <david@dtcooper.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"","title":"License"},{"location":"about/license/#mit-license","text":"Crazy Arms is free and open source software licensed under the MIT License. You can pretty much do whatever you want it provided you preserve the below notices in your copy or derivative work. Differently licensed works, modifications, and larger works may be distributed under different terms and without source code. MIT License Copyright (c) 2020, David Cooper <david@dtcooper.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"admin-guide/autodj/","text":"Programming the AutoDJ \u00b6","title":"AutoDJ"},{"location":"admin-guide/autodj/#programming-the-autodj","text":"","title":"Programming the AutoDJ"},{"location":"admin-guide/configuration/","text":"Configuration \u00b6","title":"Configuration"},{"location":"admin-guide/configuration/#configuration","text":"","title":"Configuration"},{"location":"users-guide/autodj/","text":"AutoDJ \u00b6","title":"AutoDJ"},{"location":"users-guide/autodj/#autodj","text":"","title":"AutoDJ"},{"location":"users-guide/prerecorded-broadcasts/","text":"Prerecorded Broadcasts \u00b6","title":"Prerecorded Broadcasts"},{"location":"users-guide/prerecorded-broadcasts/#prerecorded-broadcasts","text":"","title":"Prerecorded Broadcasts"},{"location":"users-guide/dj/icecast/","text":"Icecast 2 \u00b6 butt Audio HiJack Rocket Broadcaster (maybe)","title":"Icecast 2"},{"location":"users-guide/dj/icecast/#icecast-2","text":"butt Audio HiJack Rocket Broadcaster (maybe)","title":"Icecast 2"},{"location":"users-guide/dj/rtmp/","text":"RTMP \u00b6 OBS","title":"RTMP"},{"location":"users-guide/dj/rtmp/#rtmp","text":"OBS","title":"RTMP"},{"location":"users-guide/dj/zoom/","text":"Zoom \u00b6 Here are the instructions to start Zoom broadcasting via a room. Prerequisites \u00b6 The systems administrator must have enabled Zoom (In the .env file, set ZOOM_ENABLED=1 ). You must have Zoom installed ( https://zoom.us/ ). Zoom Time Limits If you're not using a paid Zoom account, or your systems administrator has not set up a paid account, there are room time limits for group meetings held in Zoom rooms. (40 minutes at the time of this writing.) Your show will be capped at that length. Walkthrough \u00b6 Create and start a Zoom room. Click on the Meeting Information icon, shown below. In the Meeting Information pop-up, copy the link to the Zoom by clicking Copy Link , shown below. Paste the link into the Room Link input, choose a show length, and click Start Zoom Broadcast Now. As soon as the Broadcast Bot has entered your Zoom room, your show starts, however you must produce make noise for the stream to transition to your show. This way, you can set up your show a little bit early. Just be quiet until you're ready! Problems with Zoom? If a Broadcast Bot attendee does not enter your Zoom room roughly 15 seconds after you click Start Zoom Broadcast Now , please contact the systems administrator or report a bug with Crazy Arms .","title":"Zoom"},{"location":"users-guide/dj/zoom/#zoom","text":"Here are the instructions to start Zoom broadcasting via a room.","title":"Zoom"},{"location":"users-guide/dj/zoom/#prerequisites","text":"The systems administrator must have enabled Zoom (In the .env file, set ZOOM_ENABLED=1 ). You must have Zoom installed ( https://zoom.us/ ). Zoom Time Limits If you're not using a paid Zoom account, or your systems administrator has not set up a paid account, there are room time limits for group meetings held in Zoom rooms. (40 minutes at the time of this writing.) Your show will be capped at that length.","title":"Prerequisites"},{"location":"users-guide/dj/zoom/#walkthrough","text":"Create and start a Zoom room. Click on the Meeting Information icon, shown below. In the Meeting Information pop-up, copy the link to the Zoom by clicking Copy Link , shown below. Paste the link into the Room Link input, choose a show length, and click Start Zoom Broadcast Now. As soon as the Broadcast Bot has entered your Zoom room, your show starts, however you must produce make noise for the stream to transition to your show. This way, you can set up your show a little bit early. Just be quiet until you're ready! Problems with Zoom? If a Broadcast Bot attendee does not enter your Zoom room roughly 15 seconds after you click Start Zoom Broadcast Now , please contact the systems administrator or report a bug with Crazy Arms .","title":"Walkthrough"}]}
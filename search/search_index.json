{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crazy Arms Radio Backend \u00b6 Crazy Arms Radio Backend is a flexible and fully featured Internet radio back-end written from the ground up. It's specifically written after its author built a few fully decentralized online radio stations with varying types of scheduling and finding no existing product fit some common needs out of the box. If you're an technical user or a systems administrator wanting to install Crazy Arms, head over to the installation docs . Features At a Glance \u00b6 Priority-based Streaming Crazy Arms operates on the concept of priority. This means it chooses the source (audio input) that is streaming, properly operating, or online with the highest priority. For example, a live DJ takes priority over the AutoDJ. See more info on this concept below . Live scheduling via Google Calendar Scheduling of live DJs using Google Calendar. An invite to a calendar event means a DJ is authorized to play. Simple as that. Rather than re-invent the wheel, Google Calendar was chosen because of its wide adoption and east of use \u2014 and implementation of recurring events.. Your web front-end can integrate with that, rather than a complex, custom API. Scheduled playout of long-format audio files, ie prerecorded shows A major use case is taking long-format audio files (ie two hours) and scheduling them to play at specific times, superseding the AutoDJ. Broadcasting for non-technical users with Zoom This is implemented with Zoom for Linux using a Docker container. A \"runner\" bash script does its best to connect to a user's Zoom room and listen in. It's inherently a bit brittle, but can be troubleshooted somewhat easily in a web browser running noVNC by an admin. Idiot-Tolerant\u2122 DJing If a live DJ or Zoom room is broadcasting silence, Crazy Arms picks another input to stream from. Completely Docker -ized Easy development and easy deployment using docker-compose . Useful and informative station administration and status tools. Leveraging Django 's admin interface much of Crazy Arms can be managed by administrators (or users with the necessary permissions). A status page is also provided that uses server-sent events in which the Harbor service script communicates directly with your web browser in real-time. Uploading audio from varied sources Uploading of audio files from sources like SoundCloud , Mixcloud , or YouTube are supported. Just enter a URL and the Crazy Arms downloads and processes your audio file. This utilizes the wonderful youtube-dlc tool and supports literally thousands of sites ! An AutoDJ that plays blocks of advertisements and station IDs (stop sets) This feature can optionally be enabled in the \"Server Settings > Configuration\" section. Fine-grained user permission structure. If a user is not a superuser, there are several permission groups to allow them some administrative privileges. Accessible Logs Less technical users can see server logs without ssh or command-line knowledge to help troubleshoot. Maybe a DJ got their password wrong or tried to broadcast at the wrong time? Streaming Customization At your own risk, you can modify Liquidsoap Harbor scripts. This gives pretty high flexibility for various use cases. Audio Infrastructure Overview \u00b6 Sources, Harbor, and Upstreams Explained \u00b6 The main audio component of Crazy Arms is called the Harbor. This is a customizable script, implemented in Liquidsoap that takes care of choosing what to broadcast and when. Think of the Harbor as a robot taking several sources and deciding which one is best to broadcast based on the rules you see on the status page. flowchart LR subgraph sources [\"Priority-Based Sources\"] prerecord(\"1. Pre-recorded Broadcast<br>(Scheduled, long-format shows)\") dj(\"2. Live DJ<br>(IceCast 2 / SHOUTCast)\") zoom(\"3. Zoom Room<br>(optional)\") autodj(\"4. AutoDJ<br>(optional)\") failsafe(5. Failsafe Audio File) end harbor((\"Harbor Service<br>(Intelligent stream picker)\")) prerecord -->|highest priority| harbor dj --> harbor zoom --> harbor autodj --> harbor failsafe -->|lowest priority| harbor subgraph upstreams [\"Upstream Services (Examples)\"] icecast1(\"Local IceCast 2 Server (mp3)\") icecast2(\"External IceCast 2 Server (aac)\") icecastOthers(\"Other IceCast 2 Servers\") end harbor --> icecast1 harbor --> icecast2 harbor --> icecastOthers listeners((\"Listeners\")) icecast1 --> listeners icecast2 --> listeners icecastOthers --> listeners","title":"Home"},{"location":"#crazy-arms-radio-backend","text":"Crazy Arms Radio Backend is a flexible and fully featured Internet radio back-end written from the ground up. It's specifically written after its author built a few fully decentralized online radio stations with varying types of scheduling and finding no existing product fit some common needs out of the box. If you're an technical user or a systems administrator wanting to install Crazy Arms, head over to the installation docs .","title":"Crazy Arms Radio Backend"},{"location":"#features-at-a-glance","text":"Priority-based Streaming Crazy Arms operates on the concept of priority. This means it chooses the source (audio input) that is streaming, properly operating, or online with the highest priority. For example, a live DJ takes priority over the AutoDJ. See more info on this concept below . Live scheduling via Google Calendar Scheduling of live DJs using Google Calendar. An invite to a calendar event means a DJ is authorized to play. Simple as that. Rather than re-invent the wheel, Google Calendar was chosen because of its wide adoption and east of use \u2014 and implementation of recurring events.. Your web front-end can integrate with that, rather than a complex, custom API. Scheduled playout of long-format audio files, ie prerecorded shows A major use case is taking long-format audio files (ie two hours) and scheduling them to play at specific times, superseding the AutoDJ. Broadcasting for non-technical users with Zoom This is implemented with Zoom for Linux using a Docker container. A \"runner\" bash script does its best to connect to a user's Zoom room and listen in. It's inherently a bit brittle, but can be troubleshooted somewhat easily in a web browser running noVNC by an admin. Idiot-Tolerant\u2122 DJing If a live DJ or Zoom room is broadcasting silence, Crazy Arms picks another input to stream from. Completely Docker -ized Easy development and easy deployment using docker-compose . Useful and informative station administration and status tools. Leveraging Django 's admin interface much of Crazy Arms can be managed by administrators (or users with the necessary permissions). A status page is also provided that uses server-sent events in which the Harbor service script communicates directly with your web browser in real-time. Uploading audio from varied sources Uploading of audio files from sources like SoundCloud , Mixcloud , or YouTube are supported. Just enter a URL and the Crazy Arms downloads and processes your audio file. This utilizes the wonderful youtube-dlc tool and supports literally thousands of sites ! An AutoDJ that plays blocks of advertisements and station IDs (stop sets) This feature can optionally be enabled in the \"Server Settings > Configuration\" section. Fine-grained user permission structure. If a user is not a superuser, there are several permission groups to allow them some administrative privileges. Accessible Logs Less technical users can see server logs without ssh or command-line knowledge to help troubleshoot. Maybe a DJ got their password wrong or tried to broadcast at the wrong time? Streaming Customization At your own risk, you can modify Liquidsoap Harbor scripts. This gives pretty high flexibility for various use cases.","title":"Features At a Glance"},{"location":"#audio-infrastructure-overview","text":"","title":"Audio Infrastructure Overview"},{"location":"#sources-harbor-and-upstreams-explained","text":"The main audio component of Crazy Arms is called the Harbor. This is a customizable script, implemented in Liquidsoap that takes care of choosing what to broadcast and when. Think of the Harbor as a robot taking several sources and deciding which one is best to broadcast based on the rules you see on the status page. flowchart LR subgraph sources [\"Priority-Based Sources\"] prerecord(\"1. Pre-recorded Broadcast<br>(Scheduled, long-format shows)\") dj(\"2. Live DJ<br>(IceCast 2 / SHOUTCast)\") zoom(\"3. Zoom Room<br>(optional)\") autodj(\"4. AutoDJ<br>(optional)\") failsafe(5. Failsafe Audio File) end harbor((\"Harbor Service<br>(Intelligent stream picker)\")) prerecord -->|highest priority| harbor dj --> harbor zoom --> harbor autodj --> harbor failsafe -->|lowest priority| harbor subgraph upstreams [\"Upstream Services (Examples)\"] icecast1(\"Local IceCast 2 Server (mp3)\") icecast2(\"External IceCast 2 Server (aac)\") icecastOthers(\"Other IceCast 2 Servers\") end harbor --> icecast1 harbor --> icecast2 harbor --> icecastOthers listeners((\"Listeners\")) icecast1 --> listeners icecast2 --> listeners icecastOthers --> listeners","title":"Sources, Harbor, and Upstreams Explained"},{"location":"glossary/","text":"Glossary of Terms \u00b6 AutoDJ related \u00b6 Audio Asset Audio files, music or other short programming for regular playout. An example would be the track Ray Price - Crazy Arms. Playlist A collection or group of audio assets for regular playout. An example would be a playlist called \"Ray Price - Country Classics\" containing several songs (audio assets). Rotator A collection of stations IDs, advertisements, PSAs, etc of the same category. Examples would be a rotator named \"Advertisements\" or \"Station IDs.\" Rotator Asset A single short audio asset inside of a rotator, ie an individual station ID, advertisement, PSA, etc. Examples would be short clips called \"David's Steel Guitar Ad, 30 seconds.\" (in the \"Advertisements\" rotator) or \"Evening Station ID #1\" (in the \"Station IDs\" rotator). Stop Set A block of stations IDs, PSAs, etc which in turn is really just a block one or more rotators. An example would be a stop set called \"Stop Set #1\" containing three rotators as entries: (1) \"Station IDs,\" (2) \"Advertisements,\" and (3) \"Station IDs.\" NOTE: duplicate rotators is allowed, as in this example. Weight Random weight. TODO document better.","title":"Glossary of Terms"},{"location":"glossary/#glossary-of-terms","text":"","title":"Glossary of Terms"},{"location":"glossary/#autodj-related","text":"Audio Asset Audio files, music or other short programming for regular playout. An example would be the track Ray Price - Crazy Arms. Playlist A collection or group of audio assets for regular playout. An example would be a playlist called \"Ray Price - Country Classics\" containing several songs (audio assets). Rotator A collection of stations IDs, advertisements, PSAs, etc of the same category. Examples would be a rotator named \"Advertisements\" or \"Station IDs.\" Rotator Asset A single short audio asset inside of a rotator, ie an individual station ID, advertisement, PSA, etc. Examples would be short clips called \"David's Steel Guitar Ad, 30 seconds.\" (in the \"Advertisements\" rotator) or \"Evening Station ID #1\" (in the \"Station IDs\" rotator). Stop Set A block of stations IDs, PSAs, etc which in turn is really just a block one or more rotators. An example would be a stop set called \"Stop Set #1\" containing three rotators as entries: (1) \"Station IDs,\" (2) \"Advertisements,\" and (3) \"Station IDs.\" NOTE: duplicate rotators is allowed, as in this example. Weight Random weight. TODO document better.","title":"AutoDJ related"},{"location":"installation/","text":"Installation Guide \u00b6 This guide is intended for systems administrators only. Installation \u00b6 Quickstart \u00b6 Crazy Arms is under development Crazy Arms is currently under active development, however you can preview things right now by doing the following steps below. These will likely change after initial development is complete. Prerequisite: Linux or macOS with Docker and docker-compose installed. In your terminal clone the repo and start the code. Building the containers may take several minutes. git clone git@github.com:dtcooper/carb.git cd carb ./compose.sh up You'll be asked a few questions about setting up Crazy Arms in your terminal. When building is done, then in your browser go to http://localhost/ . You'll be prompted in the application about setting up your station. If you want a fairly preview of what the AutoDJ has to offer, be sure to select \"Preload the AutoDJ\" when setting up your station. To stop, in your terminal press CTRL+C . Unit Tests \u00b6 ./compose.sh test # Tear down test dependent containers (postgres and redis) ./compose --test down Upgrading \u00b6 Development \u00b6 Helpful Practices \u00b6 In .env set DEBUG = True overrides.yml ./compose.sh development commands","title":"Installation"},{"location":"installation/#installation-guide","text":"This guide is intended for systems administrators only.","title":"Installation Guide"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#quickstart","text":"Crazy Arms is under development Crazy Arms is currently under active development, however you can preview things right now by doing the following steps below. These will likely change after initial development is complete. Prerequisite: Linux or macOS with Docker and docker-compose installed. In your terminal clone the repo and start the code. Building the containers may take several minutes. git clone git@github.com:dtcooper/carb.git cd carb ./compose.sh up You'll be asked a few questions about setting up Crazy Arms in your terminal. When building is done, then in your browser go to http://localhost/ . You'll be prompted in the application about setting up your station. If you want a fairly preview of what the AutoDJ has to offer, be sure to select \"Preload the AutoDJ\" when setting up your station. To stop, in your terminal press CTRL+C .","title":"Quickstart"},{"location":"installation/#unit-tests","text":"./compose.sh test # Tear down test dependent containers (postgres and redis) ./compose --test down","title":"Unit Tests"},{"location":"installation/#upgrading","text":"","title":"Upgrading"},{"location":"installation/#development","text":"","title":"Development"},{"location":"installation/#helpful-practices","text":"In .env set DEBUG = True overrides.yml ./compose.sh development commands","title":"Helpful Practices"},{"location":"admin-guide/autodj/","text":"Programming the AutoDJ \u00b6","title":"AutoDJ"},{"location":"admin-guide/autodj/#programming-the-autodj","text":"","title":"Programming the AutoDJ"},{"location":"admin-guide/configuration/","text":"Configuration \u00b6","title":"Configuration"},{"location":"admin-guide/configuration/#configuration","text":"","title":"Configuration"},{"location":"users-guide/dj/icecast/","text":"IceCast 2 or SHOUTcast \u00b6","title":"IceCast 2 or SHOUTcast"},{"location":"users-guide/dj/icecast/#icecast-2-or-shoutcast","text":"","title":"IceCast 2 or SHOUTcast"},{"location":"users-guide/dj/zoom/","text":"Zoom \u00b6 Here are the instructions to start Zoom broadcasting via a room. Prerequisites \u00b6 The systems administrator must have enabled Zoom (In the .env file, set ZOOM_ENABLED=1 ). You must have Zoom installed ( https://zoom.us/ ). Zoom Time Limits If you're not using a paid Zoom account, or your systems administrator has not set up a paid account, there are room time limits for group meetings held in Zoom rooms. (40 minutes at the time of this writing.) Your show will be capped at that length. Walkthrough \u00b6 Create and start a Zoom room. Click on the Meeting Information icon, shown below. In the Meeting Information pop-up, copy the link to the Zoom by clicking Copy Link , show below. Paste the link into the Room Link input, choose a show length, and click Start Zoom Broadcast Now. As soon as the Broadcast Bot has entered your Zoom room, your show starts, however you must produce make noise for the stream to transition to your show. This way, you can set up your show a little bit early. Just be quiet until you're ready! Danger If a Broadcast Bot attendee does not enter your Zoom room roughly 15 seconds after you click Start Zoom Broadcast Now , please contact the systems administrator or report a bug with Crazy Arms .","title":"Zoom"},{"location":"users-guide/dj/zoom/#zoom","text":"Here are the instructions to start Zoom broadcasting via a room.","title":"Zoom"},{"location":"users-guide/dj/zoom/#prerequisites","text":"The systems administrator must have enabled Zoom (In the .env file, set ZOOM_ENABLED=1 ). You must have Zoom installed ( https://zoom.us/ ). Zoom Time Limits If you're not using a paid Zoom account, or your systems administrator has not set up a paid account, there are room time limits for group meetings held in Zoom rooms. (40 minutes at the time of this writing.) Your show will be capped at that length.","title":"Prerequisites"},{"location":"users-guide/dj/zoom/#walkthrough","text":"Create and start a Zoom room. Click on the Meeting Information icon, shown below. In the Meeting Information pop-up, copy the link to the Zoom by clicking Copy Link , show below. Paste the link into the Room Link input, choose a show length, and click Start Zoom Broadcast Now. As soon as the Broadcast Bot has entered your Zoom room, your show starts, however you must produce make noise for the stream to transition to your show. This way, you can set up your show a little bit early. Just be quiet until you're ready! Danger If a Broadcast Bot attendee does not enter your Zoom room roughly 15 seconds after you click Start Zoom Broadcast Now , please contact the systems administrator or report a bug with Crazy Arms .","title":"Walkthrough"}]}
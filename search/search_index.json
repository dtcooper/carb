{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crazy Arms Radio Backend \u00b6 Danger: Hic Sunt Dracones (Here Be Dragons) Crazy Arms is currently under active development , however you can preview things right now. This documentation is a work in progress. There are missing sections, and it may include incorrect information until the first release. Crazy Arms Radio Backend is a flexible and fully featured Internet radio back-end written from the ground up. It\u2019s specifically written after its author built a few fully decentralized online radio stations with some common needs finding no existing product fit. Crazy Arms seeks to fit those needs needs out of the box, but allows for stations to customize their stream if necessary to fit their unique use cases. Installation \u00b6 If you\u2019re an technical user or a systems administrator wanting to install Crazy Arms, head over to the installation instructions . Audio Infrastructure Overview \u00b6 Sources, Harbor, and Upstreams Explained \u00b6 The Harbor \u00b6 The main audio component of Crazy Arms is called the Harbor. It takes care of choosing what to broadcast based on some simple rules. In a sense, it\u2019s a stream picker. Think of the Harbor as a robot sitting at an imaginary console, deciding what to play and when, using its crazy arms turning volume knobs, and pushing and pulling on faders at exactly the right moment. (And just like that, we arrive at the reason for the project\u2019s name! Okay, it\u2019s not the only reason\u2026 ) Sources \u00b6 The harbor has several input sources. A source is any audio input feeding into the harbor. In our robot example above, think of sources as input channels on the console. Out of the box examples of sources include the AutoDJ , scheduled, pre-recorded broadcasts , and live DJs streaming with Icecast 2 , RTMP (experimental), or a Zoom room . Each input is assigned a priority, and the source with the highest priority that is active will be what the robot chooses to play. We call this concept priority-based streaming. Active and Inactive Sources, Silence Detection When a source goes from inactive to active, the Harbor will smoothly fade to it. What exactly constitutes active and inactive? The answer is that it depends on the source. For example, in the case of the AutoDJ source, Crazy Arms will always have music to play so that source is always considered to be active. (You did upload music into the AutoDJ, right!?) The AutoDJ has low priority so it\u2019s sort of an always-on default. On the other hand, take a \u201clive source\u201d like a live DJ streaming using Icecast 2. When the DJ connects and starts streaming, that source is active. That\u2019s not the whole story. The harbor uses silence detection for live sources. This means if a live DJ is connected and streaming, but is broadcasting silence the source is considered inactive. Suppose their microphone isn\u2019t working or a fader on their mixer is accidentally pulled down. Or maybe they forgot to disconnect. We wouldn\u2019t want your station silent, would we? In short, if a live source is connected but silent, it will be considered inactive. The amount of silence before fading is configurable but defaults to 15 seconds. The theory behind this feature is part of the Idiot-Tolerant\u2122 DJing philosophy of Crazy Arms. The Failsafe, the Real Always-on Default Remember when I called the AutoDJ an \u201calways-on default\u201d just a couple paragraphs ago. Well, the AutoDJ can be disabled or end up in an erroneous state, for example if it chokes up on an invalid audio file 1 , or you start deleting music off the disk. If that happens, the AutoDJ will be an inactive source and as noted above Crazy Arms doesn\u2019t like to broadcast silence. For this reason, it\u2019s not really the always-on default source with the lowest priority. It just acts like it. Enter, the failsafe. This is a track that plays on simple repeat. The preloaded track is ridiculously annoying hold music but can be changed using the Station Configuration module in the admin site. Upstream Servers \u00b6 The last thing you need to know about are we Crazy Arms called upstream servers. These are simply places where your station is being broadcast to, usually Icecast 2 servers. That\u2019s where listeners connect to. They\u2019re the final output of the Harbor. Some radio automation suites call these \u201cencoders.\u201d These might be remote partners like iHeart or SiriusXM , a streaming provider like StreamGuys , or your own infrastructure. You can configure as many upstream servers as you like. For convenience and to kickstart your station, Crazy Arms bundles a local Icecast 2 server it streams MP3 at 128kbps to by default, using the popular icecast-kh branch. Harbor Flow Diagram \u00b6 Now that you understand the basic concepts with the Harbor, here\u2019s what it looks like. Harbor Flow Diagram flowchart LR subgraph sources [\"Priority-Based Sources\"] prerecord(\"1. Pre-recorded Broadcast (Scheduled, long-format shows)\") subgraph live-sources [\"Live Sources (Silence Detection)\"] dj(\"2. Live DJ (Icecast 2, RTMP)\") zoom(\"3. Live Zoom Room (if available)\") end autodj(\"4. AutoDJ (if available)\") failsafe(5. Failsafe) end harbor((\"Harbor (Intelligent stream picker)\")) prerecord -->|highest priority| harbor dj --> harbor zoom --> harbor autodj --> harbor failsafe -->|lowest priority| harbor subgraph upstreams [\"Upstream Servers\"] icecast1(\"Local Icecast 2 Server (mp3)\") icecast2(\"External Icecast 2 Server (aac)\") icecastOthers(\"Other Icecast 2 Servers\") end harbor --> icecast1 harbor --> icecast2 harbor --> icecastOthers listeners((\"Listeners\")) icecast1 --> listeners icecast2 --> listeners icecastOthers --> listeners Sources Details \u00b6 Pre-recorded Broadcasts Source Details Priority: 1 (highest) Silence Detection: Disabled Description: Audio uploaded into the admin site, then scheduled for airplay at a specific time. Availability: Pre-recorded broadcasts are always available in Crazy Arms to users with the Program and schedule pre-recorded broadcasts permission. Example: Two hour show recorded to an mp3 called friday_night_mix.mp3 . This file is uploaded into the web UI by Alison Administrator on Monday, where she then schedules it to air Tuesday from 9:00pm to 11:00pm. Live DJ Source Details Priority: 2 Silence Detection: Enabled Description: Live DJ streaming using either Icecast 2 or RMTP. Availability: The ability to live DJ is always available to users provided they are authorized on the harbor . Example: Diana Disk Jockey uses Audio HiJack from her Macbook to broadcast a live show with USB microphone and iTunes on Wednesday from 6:00pm to 8:00pm. Zoom Room Source Details Priority: 3 Silence Detection: Enabled Description: Live streaming using a Zoom room. Availability: The ability to use a Zoom room is only available if it is enabled for your installation ( ZOOM_ENABLED=1 in your .env file ). Furthermore it is only available to users provided they are authorized on the harbor . Example: Video Conference Charlie starts a Zoom room , enters the room link into Crazy Arms web interface and click start for one hour broadcast at 10:00am on Thursday. AutoDJ Source Details Priority: 4 Silence Detection: Disabled Description: Audio uploaded into the admin site that plays at random. More information here . Availability: The autodj is available if the station configuration AUTODJ_ENABLED is set to True , which is the default. Example: Steel Guitar Sally uploads the entire Ray Price catalog to the AutoDJ through the admin site so music from that plays except during for the shows with higher priority scheduled on Tuesday, Wednesday and Thursday. Failsafe Source Details Priority: 5 (Lowest, always available) Silence Detection: Disabled Description: Audio that plays when nothing else is available. (You\u2019ll likely only to hear this if the AutoDJ is disabled.) Availability: The failsafe is always on. That\u2019s kind of the point, right? Example: Station Manager Mike Bob disabled the AutoDJ for the radio station. When no one is streaming a live show, the failsafe track plays on repeat. Listeners are probably annoyed! For shame, Mike! Customization & Settings \u00b6 The Harbor is customizable. There are several settings you can choose from and technical users can add additional sources or program the Harbor to do all sorts of novel things. This level of customization, while for advanced users, is an important feature of Crazy Arms. Every station is different some may have nonstandard cases, so there may be no one size fits all solution for everyone. If you\u2019re an administrator, find out how to customize the Harbor by reading more here . Features At a Glance \u00b6 Priority-based Streaming Crazy Arms operates on the concept of priority. This means it chooses the source (audio input) that is streaming, properly operating, or online with the highest priority. For example, a live DJ takes priority over the AutoDJ. See more info on this concept below . Live scheduling via Google Calendar Scheduling of live DJs using Google Calendar. An invite to a calendar event means a DJ is authorized to play. Simple as that. Rather than re-invent the wheel, Google Calendar was chosen because of its wide adoption and east of use \u2014 and implementation of recurring events.. Your web front-end can integrate with that, rather than a complex, custom API. Scheduled playout of long-format audio files, ie prerecorded shows A major use case is taking long-format audio files (ie two hours) and scheduling them to play at specific times, superseding the AutoDJ. Broadcasting for non-technical users with Zoom This is implemented with Zoom for Linux using a Docker container. A \u201crunner\u201d bash script does its best to connect to a user\u2019s Zoom room and listen in. It\u2019s inherently a bit brittle, but can be troubleshooted somewhat easily in a web browser running noVNC by an admin. Idiot-Tolerant\u2122 DJing If a live DJ or Zoom room is broadcasting silence, Crazy Arms picks another source to stream from. Completely Docker -ized Easy development and easy deployment using docker-compose . Useful and informative station administration and status tools. Leveraging Django \u2018s admin interface much of Crazy Arms can be managed by administrators (or users with the necessary permissions). A status page is also provided that uses server-sent events in which the Harbor service script communicates directly with your web browser in real-time. Uploading audio from varied sources Uploading of audio files from sources like SoundCloud , Mixcloud , or YouTube are supported. Just enter a URL and the Crazy Arms downloads and processes your audio file. This utilizes the wonderful youtube-dlc tool and supports literally thousands of sites ! An AutoDJ that plays blocks of advertisements and station IDs (stop sets) This feature can optionally be enabled in the \u201cServer Settings > Configuration\u201d section. Fine-grained user permission structure. If a user is not an administrator, there are several permission groups to allow them some administrative privileges. Accessible Logs Less technical users can see server logs without ssh or command-line knowledge to help troubleshoot. Maybe a DJ got their password wrong or tried to broadcast at the wrong time? Streaming Customization At your own risk, you can modify Liquidsoap Harbor scripts. This gives pretty high flexibility for various use cases. RTMP Support (Experimental) There\u2019s experimental support for RTMP, so anyone who\u2019s familiar with tools like Open Source Broadcaster (OBS) can stream to the harbor. Of course, video is discarded. Non-Features \u00b6 The following are non-features of Crazy Arms. Front-end Not Included Crazy Arms is designed to be a backend for your radio stream only. A user interface that includes calendars, a fancy stream player, and metadata isn\u2019t included. Admin Site Look and Feel The admin site for Crazy Arms has a fairly inflexible look and feel. It\u2019s not necessarily a beautiful, easy to use interface but instead meant for somewhat technical users. This is by design and was chosen for ease of programming. The technical reason for why is that we chose to build it on top of Django\u2019s admin site module. Crazy Arms tries very hard to reject invalid audio files, but it is theoretically possible for it happen, in which case the AutoDJ will fail and become inactive. \u21a9","title":"Home"},{"location":"#crazy-arms-radio-backend","text":"Danger: Hic Sunt Dracones (Here Be Dragons) Crazy Arms is currently under active development , however you can preview things right now. This documentation is a work in progress. There are missing sections, and it may include incorrect information until the first release. Crazy Arms Radio Backend is a flexible and fully featured Internet radio back-end written from the ground up. It\u2019s specifically written after its author built a few fully decentralized online radio stations with some common needs finding no existing product fit. Crazy Arms seeks to fit those needs needs out of the box, but allows for stations to customize their stream if necessary to fit their unique use cases.","title":"Crazy Arms Radio Backend"},{"location":"#installation","text":"If you\u2019re an technical user or a systems administrator wanting to install Crazy Arms, head over to the installation instructions .","title":"Installation"},{"location":"#audio-infrastructure-overview","text":"","title":"Audio Infrastructure Overview"},{"location":"#sources-harbor-and-upstreams-explained","text":"","title":"Sources, Harbor, and Upstreams Explained"},{"location":"#the-harbor","text":"The main audio component of Crazy Arms is called the Harbor. It takes care of choosing what to broadcast based on some simple rules. In a sense, it\u2019s a stream picker. Think of the Harbor as a robot sitting at an imaginary console, deciding what to play and when, using its crazy arms turning volume knobs, and pushing and pulling on faders at exactly the right moment. (And just like that, we arrive at the reason for the project\u2019s name! Okay, it\u2019s not the only reason\u2026 )","title":"The Harbor"},{"location":"#sources","text":"The harbor has several input sources. A source is any audio input feeding into the harbor. In our robot example above, think of sources as input channels on the console. Out of the box examples of sources include the AutoDJ , scheduled, pre-recorded broadcasts , and live DJs streaming with Icecast 2 , RTMP (experimental), or a Zoom room . Each input is assigned a priority, and the source with the highest priority that is active will be what the robot chooses to play. We call this concept priority-based streaming. Active and Inactive Sources, Silence Detection When a source goes from inactive to active, the Harbor will smoothly fade to it. What exactly constitutes active and inactive? The answer is that it depends on the source. For example, in the case of the AutoDJ source, Crazy Arms will always have music to play so that source is always considered to be active. (You did upload music into the AutoDJ, right!?) The AutoDJ has low priority so it\u2019s sort of an always-on default. On the other hand, take a \u201clive source\u201d like a live DJ streaming using Icecast 2. When the DJ connects and starts streaming, that source is active. That\u2019s not the whole story. The harbor uses silence detection for live sources. This means if a live DJ is connected and streaming, but is broadcasting silence the source is considered inactive. Suppose their microphone isn\u2019t working or a fader on their mixer is accidentally pulled down. Or maybe they forgot to disconnect. We wouldn\u2019t want your station silent, would we? In short, if a live source is connected but silent, it will be considered inactive. The amount of silence before fading is configurable but defaults to 15 seconds. The theory behind this feature is part of the Idiot-Tolerant\u2122 DJing philosophy of Crazy Arms. The Failsafe, the Real Always-on Default Remember when I called the AutoDJ an \u201calways-on default\u201d just a couple paragraphs ago. Well, the AutoDJ can be disabled or end up in an erroneous state, for example if it chokes up on an invalid audio file 1 , or you start deleting music off the disk. If that happens, the AutoDJ will be an inactive source and as noted above Crazy Arms doesn\u2019t like to broadcast silence. For this reason, it\u2019s not really the always-on default source with the lowest priority. It just acts like it. Enter, the failsafe. This is a track that plays on simple repeat. The preloaded track is ridiculously annoying hold music but can be changed using the Station Configuration module in the admin site.","title":"Sources"},{"location":"#upstream-servers","text":"The last thing you need to know about are we Crazy Arms called upstream servers. These are simply places where your station is being broadcast to, usually Icecast 2 servers. That\u2019s where listeners connect to. They\u2019re the final output of the Harbor. Some radio automation suites call these \u201cencoders.\u201d These might be remote partners like iHeart or SiriusXM , a streaming provider like StreamGuys , or your own infrastructure. You can configure as many upstream servers as you like. For convenience and to kickstart your station, Crazy Arms bundles a local Icecast 2 server it streams MP3 at 128kbps to by default, using the popular icecast-kh branch.","title":"Upstream Servers"},{"location":"#harbor-flow-diagram","text":"Now that you understand the basic concepts with the Harbor, here\u2019s what it looks like. Harbor Flow Diagram flowchart LR subgraph sources [\"Priority-Based Sources\"] prerecord(\"1. Pre-recorded Broadcast (Scheduled, long-format shows)\") subgraph live-sources [\"Live Sources (Silence Detection)\"] dj(\"2. Live DJ (Icecast 2, RTMP)\") zoom(\"3. Live Zoom Room (if available)\") end autodj(\"4. AutoDJ (if available)\") failsafe(5. Failsafe) end harbor((\"Harbor (Intelligent stream picker)\")) prerecord -->|highest priority| harbor dj --> harbor zoom --> harbor autodj --> harbor failsafe -->|lowest priority| harbor subgraph upstreams [\"Upstream Servers\"] icecast1(\"Local Icecast 2 Server (mp3)\") icecast2(\"External Icecast 2 Server (aac)\") icecastOthers(\"Other Icecast 2 Servers\") end harbor --> icecast1 harbor --> icecast2 harbor --> icecastOthers listeners((\"Listeners\")) icecast1 --> listeners icecast2 --> listeners icecastOthers --> listeners","title":"Harbor Flow Diagram"},{"location":"#sources-details","text":"Pre-recorded Broadcasts Source Details Priority: 1 (highest) Silence Detection: Disabled Description: Audio uploaded into the admin site, then scheduled for airplay at a specific time. Availability: Pre-recorded broadcasts are always available in Crazy Arms to users with the Program and schedule pre-recorded broadcasts permission. Example: Two hour show recorded to an mp3 called friday_night_mix.mp3 . This file is uploaded into the web UI by Alison Administrator on Monday, where she then schedules it to air Tuesday from 9:00pm to 11:00pm. Live DJ Source Details Priority: 2 Silence Detection: Enabled Description: Live DJ streaming using either Icecast 2 or RMTP. Availability: The ability to live DJ is always available to users provided they are authorized on the harbor . Example: Diana Disk Jockey uses Audio HiJack from her Macbook to broadcast a live show with USB microphone and iTunes on Wednesday from 6:00pm to 8:00pm. Zoom Room Source Details Priority: 3 Silence Detection: Enabled Description: Live streaming using a Zoom room. Availability: The ability to use a Zoom room is only available if it is enabled for your installation ( ZOOM_ENABLED=1 in your .env file ). Furthermore it is only available to users provided they are authorized on the harbor . Example: Video Conference Charlie starts a Zoom room , enters the room link into Crazy Arms web interface and click start for one hour broadcast at 10:00am on Thursday. AutoDJ Source Details Priority: 4 Silence Detection: Disabled Description: Audio uploaded into the admin site that plays at random. More information here . Availability: The autodj is available if the station configuration AUTODJ_ENABLED is set to True , which is the default. Example: Steel Guitar Sally uploads the entire Ray Price catalog to the AutoDJ through the admin site so music from that plays except during for the shows with higher priority scheduled on Tuesday, Wednesday and Thursday. Failsafe Source Details Priority: 5 (Lowest, always available) Silence Detection: Disabled Description: Audio that plays when nothing else is available. (You\u2019ll likely only to hear this if the AutoDJ is disabled.) Availability: The failsafe is always on. That\u2019s kind of the point, right? Example: Station Manager Mike Bob disabled the AutoDJ for the radio station. When no one is streaming a live show, the failsafe track plays on repeat. Listeners are probably annoyed! For shame, Mike!","title":"Sources Details"},{"location":"#customization-settings","text":"The Harbor is customizable. There are several settings you can choose from and technical users can add additional sources or program the Harbor to do all sorts of novel things. This level of customization, while for advanced users, is an important feature of Crazy Arms. Every station is different some may have nonstandard cases, so there may be no one size fits all solution for everyone. If you\u2019re an administrator, find out how to customize the Harbor by reading more here .","title":"Customization &amp; Settings"},{"location":"#features-at-a-glance","text":"Priority-based Streaming Crazy Arms operates on the concept of priority. This means it chooses the source (audio input) that is streaming, properly operating, or online with the highest priority. For example, a live DJ takes priority over the AutoDJ. See more info on this concept below . Live scheduling via Google Calendar Scheduling of live DJs using Google Calendar. An invite to a calendar event means a DJ is authorized to play. Simple as that. Rather than re-invent the wheel, Google Calendar was chosen because of its wide adoption and east of use \u2014 and implementation of recurring events.. Your web front-end can integrate with that, rather than a complex, custom API. Scheduled playout of long-format audio files, ie prerecorded shows A major use case is taking long-format audio files (ie two hours) and scheduling them to play at specific times, superseding the AutoDJ. Broadcasting for non-technical users with Zoom This is implemented with Zoom for Linux using a Docker container. A \u201crunner\u201d bash script does its best to connect to a user\u2019s Zoom room and listen in. It\u2019s inherently a bit brittle, but can be troubleshooted somewhat easily in a web browser running noVNC by an admin. Idiot-Tolerant\u2122 DJing If a live DJ or Zoom room is broadcasting silence, Crazy Arms picks another source to stream from. Completely Docker -ized Easy development and easy deployment using docker-compose . Useful and informative station administration and status tools. Leveraging Django \u2018s admin interface much of Crazy Arms can be managed by administrators (or users with the necessary permissions). A status page is also provided that uses server-sent events in which the Harbor service script communicates directly with your web browser in real-time. Uploading audio from varied sources Uploading of audio files from sources like SoundCloud , Mixcloud , or YouTube are supported. Just enter a URL and the Crazy Arms downloads and processes your audio file. This utilizes the wonderful youtube-dlc tool and supports literally thousands of sites ! An AutoDJ that plays blocks of advertisements and station IDs (stop sets) This feature can optionally be enabled in the \u201cServer Settings > Configuration\u201d section. Fine-grained user permission structure. If a user is not an administrator, there are several permission groups to allow them some administrative privileges. Accessible Logs Less technical users can see server logs without ssh or command-line knowledge to help troubleshoot. Maybe a DJ got their password wrong or tried to broadcast at the wrong time? Streaming Customization At your own risk, you can modify Liquidsoap Harbor scripts. This gives pretty high flexibility for various use cases. RTMP Support (Experimental) There\u2019s experimental support for RTMP, so anyone who\u2019s familiar with tools like Open Source Broadcaster (OBS) can stream to the harbor. Of course, video is discarded.","title":"Features At a Glance"},{"location":"#non-features","text":"The following are non-features of Crazy Arms. Front-end Not Included Crazy Arms is designed to be a backend for your radio stream only. A user interface that includes calendars, a fancy stream player, and metadata isn\u2019t included. Admin Site Look and Feel The admin site for Crazy Arms has a fairly inflexible look and feel. It\u2019s not necessarily a beautiful, easy to use interface but instead meant for somewhat technical users. This is by design and was chosen for ease of programming. The technical reason for why is that we chose to build it on top of Django\u2019s admin site module. Crazy Arms tries very hard to reject invalid audio files, but it is theoretically possible for it happen, in which case the AutoDJ will fail and become inactive. \u21a9","title":"Non-Features"},{"location":"glossary/","text":"Glossary of Terms \u00b6 AutoDJ related \u00b6 Audio Asset Audio files, music or other short programming for regular playout. An example would be the track Ray Price - Crazy Arms. Playlist A collection or group of audio assets for regular playout. An example would be a playlist called \u201cRay Price - Country Classics\u201d containing several songs (audio assets). Rotator A collection of stations IDs, advertisements, PSAs, etc of the same category. Examples would be a rotator named \u201cAdvertisements\u201d or \u201cStation IDs.\u201d Rotator Asset A single short audio asset inside of a rotator, ie an individual station ID, advertisement, PSA, etc. Examples would be short clips called \u201cDavid\u2019s Steel Guitar Ad, 30 seconds.\u201d (in the \u201cAdvertisements\u201d rotator) or \u201cEvening Station ID #1\u201d (in the \u201cStation IDs\u201d rotator). Stop Set A block of stations IDs, PSAs, etc which in turn is really just a block one or more rotators. An example would be a stop set called \u201cStop Set #1\u201d containing three rotators as entries: (1) \u201cStation IDs,\u201d (2) \u201cAdvertisements,\u201d and (3) \u201cStation IDs.\u201d NOTE: duplicate rotators is allowed, as in this example. Weight Random weight. TODO document better.","title":"Glossary of Terms"},{"location":"glossary/#glossary-of-terms","text":"","title":"Glossary of Terms"},{"location":"glossary/#autodj-related","text":"Audio Asset Audio files, music or other short programming for regular playout. An example would be the track Ray Price - Crazy Arms. Playlist A collection or group of audio assets for regular playout. An example would be a playlist called \u201cRay Price - Country Classics\u201d containing several songs (audio assets). Rotator A collection of stations IDs, advertisements, PSAs, etc of the same category. Examples would be a rotator named \u201cAdvertisements\u201d or \u201cStation IDs.\u201d Rotator Asset A single short audio asset inside of a rotator, ie an individual station ID, advertisement, PSA, etc. Examples would be short clips called \u201cDavid\u2019s Steel Guitar Ad, 30 seconds.\u201d (in the \u201cAdvertisements\u201d rotator) or \u201cEvening Station ID #1\u201d (in the \u201cStation IDs\u201d rotator). Stop Set A block of stations IDs, PSAs, etc which in turn is really just a block one or more rotators. An example would be a stop set called \u201cStop Set #1\u201d containing three rotators as entries: (1) \u201cStation IDs,\u201d (2) \u201cAdvertisements,\u201d and (3) \u201cStation IDs.\u201d NOTE: duplicate rotators is allowed, as in this example. Weight Random weight. TODO document better.","title":"AutoDJ related"},{"location":"server-setup/","text":"Server Setup \u00b6 This guide is intended for systems administrators only. Installation \u00b6 Quickstart \u00b6 Prerequisites Operating System: Linux or macOS Docker and docker-compose installed. In your terminal clone the repo and start the code. Building the containers may take several minutes. git clone git@github.com:dtcooper/carb.git cd carb ./compose.sh up You\u2019ll be asked a few questions about setting up Crazy Arms in your terminal. When building is done, then in your browser go to http://localhost/ . You\u2019ll be prompted in the application about setting up your station. If you want a fairly preview of what the AutoDJ has to offer, be sure to select \u201cPreload the AutoDJ\u201d when setting up your station. To stop, in your terminal press Ctrl + C . To run Crazy Arms in the background which is useful for deployment do the following, ./compose.sh up -d ./compose.sh down Unit Tests \u00b6 ./compose.sh test # Tear down test dependent containers (postgres and redis) ./compose --test down Upgrading \u00b6 Development \u00b6 Helpful Practices \u00b6 In .env set DEBUG = True overrides.yml ./compose.sh development commands","title":"Server Setup"},{"location":"server-setup/#server-setup","text":"This guide is intended for systems administrators only.","title":"Server Setup"},{"location":"server-setup/#installation","text":"","title":"Installation"},{"location":"server-setup/#quickstart","text":"Prerequisites Operating System: Linux or macOS Docker and docker-compose installed. In your terminal clone the repo and start the code. Building the containers may take several minutes. git clone git@github.com:dtcooper/carb.git cd carb ./compose.sh up You\u2019ll be asked a few questions about setting up Crazy Arms in your terminal. When building is done, then in your browser go to http://localhost/ . You\u2019ll be prompted in the application about setting up your station. If you want a fairly preview of what the AutoDJ has to offer, be sure to select \u201cPreload the AutoDJ\u201d when setting up your station. To stop, in your terminal press Ctrl + C . To run Crazy Arms in the background which is useful for deployment do the following, ./compose.sh up -d ./compose.sh down","title":"Quickstart"},{"location":"server-setup/#unit-tests","text":"./compose.sh test # Tear down test dependent containers (postgres and redis) ./compose --test down","title":"Unit Tests"},{"location":"server-setup/#upgrading","text":"","title":"Upgrading"},{"location":"server-setup/#development","text":"","title":"Development"},{"location":"server-setup/#helpful-practices","text":"In .env set DEBUG = True overrides.yml ./compose.sh development commands","title":"Helpful Practices"},{"location":"about/author-miscellany/","text":"About the Author and Other Miscellany \u00b6 David Cooper \u00b6 Crazy Arms Radio Back is written by David Cooper . David is a comedian , radio personality , and podcaster . His background in engineering is from having formerly been a software engineer at Eventbrite and Autodesk . He\u2019s staff and on-air talent at BMIR 94.5 FM (Burning Man Information Radio) had stories done on KALW 91.7 FM , and been on a number of stations and shows in the San Francisco Bay Area . He runs an entirely inappropriate weekly, wacky call-in radio show at a coffee shop window :window: in San Francisco described below. NSFW Art Ahead We\u2019d love it if you\u2019d listen to David\u2019s weekly comedy show This Is Going Well, I Think, however be warned: it\u2019s very, very NSFW. Find out more at www.jew.pizza . (And yes, that domain is real.) Crazy Arms In The Wild \u00b6 David has deployed Crazy Arms to the following online stations, Shouting Fire KTLC The Lost Church Radio 820hz BMIR 94.5 for their 2020 online-only broadcast Donations \u00b6 There\u2019s about a hundred million other charities that would be a better use of your money, so donate to one of those! The ACLU or the EFF could always use a hand. If you still want to donate against your better judgment, David\u2019s Bitcoin address is as follows, 1PoDcAStyJoB7zZz2mny4KjtjiEu8S44ns Final Note \u00b6 \u2026remember kids, have fun!","title":"Author & Miscellany"},{"location":"about/author-miscellany/#about-the-author-and-other-miscellany","text":"","title":"About the Author and Other Miscellany"},{"location":"about/author-miscellany/#david-cooper","text":"Crazy Arms Radio Back is written by David Cooper . David is a comedian , radio personality , and podcaster . His background in engineering is from having formerly been a software engineer at Eventbrite and Autodesk . He\u2019s staff and on-air talent at BMIR 94.5 FM (Burning Man Information Radio) had stories done on KALW 91.7 FM , and been on a number of stations and shows in the San Francisco Bay Area . He runs an entirely inappropriate weekly, wacky call-in radio show at a coffee shop window :window: in San Francisco described below. NSFW Art Ahead We\u2019d love it if you\u2019d listen to David\u2019s weekly comedy show This Is Going Well, I Think, however be warned: it\u2019s very, very NSFW. Find out more at www.jew.pizza . (And yes, that domain is real.)","title":"David Cooper"},{"location":"about/author-miscellany/#crazy-arms-in-the-wild","text":"David has deployed Crazy Arms to the following online stations, Shouting Fire KTLC The Lost Church Radio 820hz BMIR 94.5 for their 2020 online-only broadcast","title":"Crazy Arms In The Wild"},{"location":"about/author-miscellany/#donations","text":"There\u2019s about a hundred million other charities that would be a better use of your money, so donate to one of those! The ACLU or the EFF could always use a hand. If you still want to donate against your better judgment, David\u2019s Bitcoin address is as follows, 1PoDcAStyJoB7zZz2mny4KjtjiEu8S44ns","title":"Donations"},{"location":"about/author-miscellany/#final-note","text":"\u2026remember kids, have fun!","title":"Final Note"},{"location":"about/changelog/","text":"Changelog \u00b6 Version 0.0.1 (YYYY-MM-DD) \u00b6 Initial release. Everything is new!","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-001-yyyy-mm-dd","text":"Initial release. Everything is new!","title":"Version 0.0.1 (YYYY-MM-DD)"},{"location":"about/license/","text":"License \u00b6 MIT License \u00b6 Crazy Arms is free and open source software licensed under the MIT License. You can pretty much do whatever you want it provided you preserve the below notices in your copy or derivative work. Differently licensed works, modifications, and larger works may be distributed under different terms and without source code. MIT License Copyright (c) 2020, David Cooper <david@dtcooper.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"","title":"License"},{"location":"about/license/#mit-license","text":"Crazy Arms is free and open source software licensed under the MIT License. You can pretty much do whatever you want it provided you preserve the below notices in your copy or derivative work. Differently licensed works, modifications, and larger works may be distributed under different terms and without source code. MIT License Copyright (c) 2020, David Cooper <david@dtcooper.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"about/support/","text":"Issues and Support \u00b6 Issues and Bugs \u00b6 If you encounter a bug or issue, please create a new GitHub issue here outing the problem with as much detail as possible. Support \u00b6 Paid support is available. Reach out to David at david@dtcooper.com.","title":"Issues & Support"},{"location":"about/support/#issues-and-support","text":"","title":"Issues and Support"},{"location":"about/support/#issues-and-bugs","text":"If you encounter a bug or issue, please create a new GitHub issue here outing the problem with as much detail as possible.","title":"Issues and Bugs"},{"location":"about/support/#support","text":"Paid support is available. Reach out to David at david@dtcooper.com.","title":"Support"},{"location":"admin-guide/autodj/","text":"Programming the AutoDJ \u00b6","title":"AutoDJ"},{"location":"admin-guide/autodj/#programming-the-autodj","text":"","title":"Programming the AutoDJ"},{"location":"admin-guide/configuration/","text":"Configuration \u00b6 There are three major ways to configure Crazy Arms, Station Settings in the Admin Site The startup environment file ( .env ) The Harbor source code, using Liquidsoap Station Settings (Dynamic Settings) \u00b6 In the admin site, the following configuration options are available, and are dynamically configured, which is to say they can be changed at any time without having to restart (and rebuild) the Crazy Arms server. Anyone with administrator privileges can edit these in the web app. Some Settings May Not Be Available If Zoom or local Icecast server is disabled in the .env file, those sections will not be available. See more information on the .env file below . Below are a list of configuration options, organized by section. General Options \u00b6 STATION_NAME \u2014 Type: String (required) The name of your radio station. PLAYOUT_LOG_PURGE_DAYS \u2014 Type: Integer (non-negative) The number of days to keep playout log entries after which they\u2019re purged. Set to 0 to keep playout log entries forever. AutoDJ Configuration \u00b6 AUTODJ_ENABLED \u2014 Type: Boolean (true or false) Whether or not to run an AutoDJ on the harbor. AUTODJ_REQUESTS \u2014 Type: Choice of: Disabled (nobody), Users, Users with \u201cProgram the AutoDJ\u201d permissions, Superusers AutoDJ requests enabled for the following users. AUTODJ_REQUESTS_NUM \u2014 Type: Integer (non-zero) The maximum number of pending AutoDJ requests (if enabled) AUTODJ_ANTI_REPEAT_ENABLED \u2014 Type: Boolean (true or false) Whether or not the AutoDJ should attempt its anti-repeat algorithm. Note if you have too few tracks, this won\u2019t work. AUTODJ_ANTI_REPEAT_NUM_TRACKS_NO_REPEAT \u2014 Type: Integer (non-negative) Number of tracks to avoid to avoid repeating (if possible). Set to 0 to disable. AUTODJ_ANTI_REPEAT_NUM_TRACKS_NO_REPEAT_ARTIST \u2014 Type: Integer (non-negative) Number of tracks to avoid playing the same artist (if possible). Set to 0 to disable. AUTODJ_PLAYLISTS_ENABLED \u2014 Type: Boolean (true or false) Whether or not the AutoDJ should use playlists AUTODJ_STOPSETS_ENABLED \u2014 Type: Boolean (true or false) Whether or not the AutoDJ plays stop sets (for ADs, PSAs, Station IDs, etc) AUTODJ_STOPSETS_ONCE_PER_MINUTES \u2014 Type: Integer (non-negative) How often a stop set should approximately be played (in minutes) Harbor Configuration \u00b6 HARBOR_COMPRESSION_NORMALIZATION \u2014 Type: Boolean (true or false) Enable compression and normalization on harbor stream. HARBOR_TRANSITION_WITH_SWOOSH \u2014 Type: Boolean (true or false) Transition between harbor sources with a ~1 second swoosh effect. HARBOR_SWOOSH_AUDIO_FILE \u2014 Type: File Audio file for the swoosh (if enabled). Sound be short, ie under 3-4 seconds. HARBOR_TRANSITION_SECONDS \u2014 Type: Decimal (non-negative) Fadeout time in seconds when transitioning between harbor sources. Set to 0 for no fadeout. HARBOR_MAX_SECONDS_SILENCE_BEFORE_INVACTIVE \u2014 Type: Integer (non-zero) The maximum number of seconds of silence on a live source (eg. Zoom or live DJs) until it will be considered inactive, ie until we would treat it as if it were offline. HARBOR_FAILSAFE_AUDIO_FILE \u2014 Type: File Failsafe audio file that the harbor should play if there\u2019s nothing else to stream. UPSTREAM_FAILSAFE_AUDIO_FILE \u2014 Type: File Failsafe audio file that should be broadcast to upstream servers if we can\u2019t connect to the harbor, ie the harbor failed to start. Audio Assets Configuration \u00b6 ASSET_ENCODING \u2014 Type: Choice of: MP3, Ogg Vorbis, FLAC Encoding of downloaded external assets and non-standard input files. ASSET_BITRATE \u2014 Type: Choice of: 64kbit, 128kbit, 192kbit, 256kbit, 320kbit Bitrate (quality) of downloaded external and non-standard audio files. (Unused for FLAC.) ASSET_DEDUPING \u2014 Type: Boolean (true or false) Enable duplicate detection for audio assets based on metadata and audio fingerprint. Google Calendar Based Authentication \u00b6 GOOGLE_CALENDAR_ENABLED \u2014 Type: Boolean (true or false) Enabled Google Calendar based authentication for DJs. GOOGLE_CALENDAR_ID \u2014 Type: String Google Calendar ID. GOOGLE_CALENDAR_CREDENTIALS_JSON \u2014 Type: String Past the contents of your Google Service JSON Account Key here (a credentials.json file).For more info from Google about this please click here . Zoom Settings \u00b6 ZOOM_MAX_SHOW_LENTH_MINUTES \u2014 Type: Integer (number of minutes) Maximum show length (in minutes) of an unscheduled Zoom broadcast. ZOOM_DEFAULT_SHOW_LENTH_MINUTES \u2014 Type: Integer (number of minutes) Default show length (in minutes) of an unscheduled Zoom broadcast. Note shows scheduled through Google Calendar will default to the length of the calendar event (or the maximum show length above, whichever is shorter). Local Icecast Server Settings \u00b6 ICECAST_LOCATION \u2014 Type: String Location setting for the Icecast server. ICECAST_ADMIN_EMAIL \u2014 Type: Email Address The admin email setting for the Icecast server. ICECAST_ADMIN_PASSWORD \u2014 Type: String (required) Admin password for the Icecast server. ICECAST_SOURCE_PASSWORD \u2014 Type: String (required) Source password for the Icecast server. ICECAST_RELAY_PASSWORD \u2014 Type: String (required) Relay password for the Icecast server. ICECAST_MAX_CLIENTS \u2014 Type: Integer (non-negative) Max connected clients allowed the Iceacst server (0 for unlimited). ICECAST_MAX_SOURCES \u2014 Type: Integer (non-negative) Max sources allowed to connect to the Icecast server (0 for unlimited). The Environment File \u2013 .env (Static Settings) \u00b6 When Crazy Arms starts for the first time with ./compose.sh , you\u2019ll get asked a series of simple questions. In your root directory, all that\u2019s happening is the file .default.env is being modified and copied to .env . Advanced Users Only Editing the .env file is meant to be done once at installation (or rarely), and is intended for systems administrators only, ie the nerds who set up Crazy Arms for your station. If your just a regular admin user, you\u2019ll probably be more interested in the station settings above. Which Services Start If you edit ZOOM_ENABLED , ICECAST_ENABLED , EMAIL_ENABLED , HARBOR_TELNET_WEB_ENABLED , RTMP_ENABLED you actually are controlling which services (or Docker containers) Crazy Arms starts up. This is the reason why these settings are static, since the list of containers we choose to run is determined at start time. Below is a copy of the .default.env file that shipped with Crazy Arms which does a decent enough job of explaining what each option does. # .default.env -- The default configuration for Crazy Arms # # Notes: # * The ./compose.sh script will copy this and fill out some values for you # on first run. # * Boolean values must be 0 or 1 # * SECRET_KEY _must_ be set (./compose.sh will set it for you) # # Whether to run in DEBUG mode (Do _NOT_ set this to 1 on production) DEBUG=0 # Django secret key -- MUST be set, ./compose.sh will generate one for you # - Valid characters: Letter, numbers and any of: ! @ # % ^ & * ( - _ = + ) SECRET_KEY= # Default timezone for server (note: users can set their own TZ in the web UI) TIMEZONE=US/Pacific # Domain name used for the web app, ie if it's at http://radio.crazyarms.xyz/, # enter radio.crazyarm.xyz. # # Note: This to match what users type into their web browser or the web app will # refuse connections. DOMAIN_NAME=localhost # Allow DJs to broadcast via a Zoom room ZOOM_ENABLED=0 # Whether or not to run a local Icecast server (kh fork) ICECAST_ENABLED=1 # Use letsencrypt to enable HTTPS. The DNS record for DOMAIN_NAME must resolve # to the IP address of your server. HTTPS_ENABLED=0 # letencrypt requires an email address if you use it HTTPS_CERTBOT_EMAIL= # Enable email notifications by enabling and filling these out EMAIL_ENABLED=0 EMAIL_SMTP_SERVER= EMAIL_SMTP_PORT= EMAIL_SMTP_USERNAME= EMAIL_SMTP_PASSWORD= # Harbor Telnet Access over Web (experimental, so disabled by default) HARBOR_TELNET_WEB_ENABLED=0 # RTMP streaming (experimental, disabled by default) RTMP_ENABLED=0 # Custom port overrides, set these to whatever you like. SFTP could be set to 22 # if you aren't running ssh on your server. #HARBOR_PORT=8001 #HTTP_PORT=80 #HTTPS_PORT=443 #ICECAST_PORT=8000 #SFTP_PORT=2022 #RTMP_PORT=1935 Liquidsoap Source (Advanced) \u00b6 TODO Liquidsoap It\u2019s complicated but lots of fun to use.","title":"Configuration"},{"location":"admin-guide/configuration/#configuration","text":"There are three major ways to configure Crazy Arms, Station Settings in the Admin Site The startup environment file ( .env ) The Harbor source code, using Liquidsoap","title":"Configuration"},{"location":"admin-guide/configuration/#station-settings-dynamic-settings","text":"In the admin site, the following configuration options are available, and are dynamically configured, which is to say they can be changed at any time without having to restart (and rebuild) the Crazy Arms server. Anyone with administrator privileges can edit these in the web app. Some Settings May Not Be Available If Zoom or local Icecast server is disabled in the .env file, those sections will not be available. See more information on the .env file below . Below are a list of configuration options, organized by section.","title":"Station Settings (Dynamic Settings)"},{"location":"admin-guide/configuration/#general-options","text":"STATION_NAME \u2014 Type: String (required) The name of your radio station. PLAYOUT_LOG_PURGE_DAYS \u2014 Type: Integer (non-negative) The number of days to keep playout log entries after which they\u2019re purged. Set to 0 to keep playout log entries forever.","title":"General Options"},{"location":"admin-guide/configuration/#autodj-configuration","text":"AUTODJ_ENABLED \u2014 Type: Boolean (true or false) Whether or not to run an AutoDJ on the harbor. AUTODJ_REQUESTS \u2014 Type: Choice of: Disabled (nobody), Users, Users with \u201cProgram the AutoDJ\u201d permissions, Superusers AutoDJ requests enabled for the following users. AUTODJ_REQUESTS_NUM \u2014 Type: Integer (non-zero) The maximum number of pending AutoDJ requests (if enabled) AUTODJ_ANTI_REPEAT_ENABLED \u2014 Type: Boolean (true or false) Whether or not the AutoDJ should attempt its anti-repeat algorithm. Note if you have too few tracks, this won\u2019t work. AUTODJ_ANTI_REPEAT_NUM_TRACKS_NO_REPEAT \u2014 Type: Integer (non-negative) Number of tracks to avoid to avoid repeating (if possible). Set to 0 to disable. AUTODJ_ANTI_REPEAT_NUM_TRACKS_NO_REPEAT_ARTIST \u2014 Type: Integer (non-negative) Number of tracks to avoid playing the same artist (if possible). Set to 0 to disable. AUTODJ_PLAYLISTS_ENABLED \u2014 Type: Boolean (true or false) Whether or not the AutoDJ should use playlists AUTODJ_STOPSETS_ENABLED \u2014 Type: Boolean (true or false) Whether or not the AutoDJ plays stop sets (for ADs, PSAs, Station IDs, etc) AUTODJ_STOPSETS_ONCE_PER_MINUTES \u2014 Type: Integer (non-negative) How often a stop set should approximately be played (in minutes)","title":"AutoDJ Configuration"},{"location":"admin-guide/configuration/#harbor-configuration","text":"HARBOR_COMPRESSION_NORMALIZATION \u2014 Type: Boolean (true or false) Enable compression and normalization on harbor stream. HARBOR_TRANSITION_WITH_SWOOSH \u2014 Type: Boolean (true or false) Transition between harbor sources with a ~1 second swoosh effect. HARBOR_SWOOSH_AUDIO_FILE \u2014 Type: File Audio file for the swoosh (if enabled). Sound be short, ie under 3-4 seconds. HARBOR_TRANSITION_SECONDS \u2014 Type: Decimal (non-negative) Fadeout time in seconds when transitioning between harbor sources. Set to 0 for no fadeout. HARBOR_MAX_SECONDS_SILENCE_BEFORE_INVACTIVE \u2014 Type: Integer (non-zero) The maximum number of seconds of silence on a live source (eg. Zoom or live DJs) until it will be considered inactive, ie until we would treat it as if it were offline. HARBOR_FAILSAFE_AUDIO_FILE \u2014 Type: File Failsafe audio file that the harbor should play if there\u2019s nothing else to stream. UPSTREAM_FAILSAFE_AUDIO_FILE \u2014 Type: File Failsafe audio file that should be broadcast to upstream servers if we can\u2019t connect to the harbor, ie the harbor failed to start.","title":"Harbor Configuration"},{"location":"admin-guide/configuration/#audio-assets-configuration","text":"ASSET_ENCODING \u2014 Type: Choice of: MP3, Ogg Vorbis, FLAC Encoding of downloaded external assets and non-standard input files. ASSET_BITRATE \u2014 Type: Choice of: 64kbit, 128kbit, 192kbit, 256kbit, 320kbit Bitrate (quality) of downloaded external and non-standard audio files. (Unused for FLAC.) ASSET_DEDUPING \u2014 Type: Boolean (true or false) Enable duplicate detection for audio assets based on metadata and audio fingerprint.","title":"Audio Assets Configuration"},{"location":"admin-guide/configuration/#google-calendar-based-authentication","text":"GOOGLE_CALENDAR_ENABLED \u2014 Type: Boolean (true or false) Enabled Google Calendar based authentication for DJs. GOOGLE_CALENDAR_ID \u2014 Type: String Google Calendar ID. GOOGLE_CALENDAR_CREDENTIALS_JSON \u2014 Type: String Past the contents of your Google Service JSON Account Key here (a credentials.json file).For more info from Google about this please click here .","title":"Google Calendar Based Authentication"},{"location":"admin-guide/configuration/#zoom-settings","text":"ZOOM_MAX_SHOW_LENTH_MINUTES \u2014 Type: Integer (number of minutes) Maximum show length (in minutes) of an unscheduled Zoom broadcast. ZOOM_DEFAULT_SHOW_LENTH_MINUTES \u2014 Type: Integer (number of minutes) Default show length (in minutes) of an unscheduled Zoom broadcast. Note shows scheduled through Google Calendar will default to the length of the calendar event (or the maximum show length above, whichever is shorter).","title":"Zoom Settings"},{"location":"admin-guide/configuration/#local-icecast-server-settings","text":"ICECAST_LOCATION \u2014 Type: String Location setting for the Icecast server. ICECAST_ADMIN_EMAIL \u2014 Type: Email Address The admin email setting for the Icecast server. ICECAST_ADMIN_PASSWORD \u2014 Type: String (required) Admin password for the Icecast server. ICECAST_SOURCE_PASSWORD \u2014 Type: String (required) Source password for the Icecast server. ICECAST_RELAY_PASSWORD \u2014 Type: String (required) Relay password for the Icecast server. ICECAST_MAX_CLIENTS \u2014 Type: Integer (non-negative) Max connected clients allowed the Iceacst server (0 for unlimited). ICECAST_MAX_SOURCES \u2014 Type: Integer (non-negative) Max sources allowed to connect to the Icecast server (0 for unlimited).","title":"Local Icecast Server Settings"},{"location":"admin-guide/configuration/#the-environment-file-env-static-settings","text":"When Crazy Arms starts for the first time with ./compose.sh , you\u2019ll get asked a series of simple questions. In your root directory, all that\u2019s happening is the file .default.env is being modified and copied to .env . Advanced Users Only Editing the .env file is meant to be done once at installation (or rarely), and is intended for systems administrators only, ie the nerds who set up Crazy Arms for your station. If your just a regular admin user, you\u2019ll probably be more interested in the station settings above. Which Services Start If you edit ZOOM_ENABLED , ICECAST_ENABLED , EMAIL_ENABLED , HARBOR_TELNET_WEB_ENABLED , RTMP_ENABLED you actually are controlling which services (or Docker containers) Crazy Arms starts up. This is the reason why these settings are static, since the list of containers we choose to run is determined at start time. Below is a copy of the .default.env file that shipped with Crazy Arms which does a decent enough job of explaining what each option does. # .default.env -- The default configuration for Crazy Arms # # Notes: # * The ./compose.sh script will copy this and fill out some values for you # on first run. # * Boolean values must be 0 or 1 # * SECRET_KEY _must_ be set (./compose.sh will set it for you) # # Whether to run in DEBUG mode (Do _NOT_ set this to 1 on production) DEBUG=0 # Django secret key -- MUST be set, ./compose.sh will generate one for you # - Valid characters: Letter, numbers and any of: ! @ # % ^ & * ( - _ = + ) SECRET_KEY= # Default timezone for server (note: users can set their own TZ in the web UI) TIMEZONE=US/Pacific # Domain name used for the web app, ie if it's at http://radio.crazyarms.xyz/, # enter radio.crazyarm.xyz. # # Note: This to match what users type into their web browser or the web app will # refuse connections. DOMAIN_NAME=localhost # Allow DJs to broadcast via a Zoom room ZOOM_ENABLED=0 # Whether or not to run a local Icecast server (kh fork) ICECAST_ENABLED=1 # Use letsencrypt to enable HTTPS. The DNS record for DOMAIN_NAME must resolve # to the IP address of your server. HTTPS_ENABLED=0 # letencrypt requires an email address if you use it HTTPS_CERTBOT_EMAIL= # Enable email notifications by enabling and filling these out EMAIL_ENABLED=0 EMAIL_SMTP_SERVER= EMAIL_SMTP_PORT= EMAIL_SMTP_USERNAME= EMAIL_SMTP_PASSWORD= # Harbor Telnet Access over Web (experimental, so disabled by default) HARBOR_TELNET_WEB_ENABLED=0 # RTMP streaming (experimental, disabled by default) RTMP_ENABLED=0 # Custom port overrides, set these to whatever you like. SFTP could be set to 22 # if you aren't running ssh on your server. #HARBOR_PORT=8001 #HTTP_PORT=80 #HTTPS_PORT=443 #ICECAST_PORT=8000 #SFTP_PORT=2022 #RTMP_PORT=1935","title":"The Environment File -- .env (Static Settings)"},{"location":"admin-guide/configuration/#liquidsoap-source-advanced","text":"TODO Liquidsoap It\u2019s complicated but lots of fun to use.","title":"Liquidsoap Source (Advanced)"},{"location":"admin-guide/google-calendar/","text":"Google Calendar Scheduling \u00b6 TODO Enabling The credential file (could absolute URL link here in CONSTANCE_CONFIG?)","title":"Google Calendar Scheduling"},{"location":"admin-guide/google-calendar/#google-calendar-scheduling","text":"TODO Enabling The credential file (could absolute URL link here in CONSTANCE_CONFIG?)","title":"Google Calendar Scheduling"},{"location":"admin-guide/permissions/","text":"User Permissions \u00b6 Harbor Authorization \u00b6","title":"User Permissions"},{"location":"admin-guide/permissions/#user-permissions","text":"","title":"User Permissions"},{"location":"admin-guide/permissions/#harbor-authorization","text":"","title":"Harbor Authorization"},{"location":"users-guide/autodj/","text":"AutoDJ \u00b6","title":"AutoDJ"},{"location":"users-guide/autodj/#autodj","text":"","title":"AutoDJ"},{"location":"users-guide/prerecorded-broadcasts/","text":"Prerecorded Broadcasts \u00b6","title":"Prerecorded Broadcasts"},{"location":"users-guide/prerecorded-broadcasts/#prerecorded-broadcasts","text":"","title":"Prerecorded Broadcasts"},{"location":"users-guide/dj/icecast/","text":"Icecast 2 \u00b6 butt Audio HiJack Rocket Broadcaster (maybe)","title":"Icecast 2"},{"location":"users-guide/dj/icecast/#icecast-2","text":"butt Audio HiJack Rocket Broadcaster (maybe)","title":"Icecast 2"},{"location":"users-guide/dj/rtmp/","text":"RTMP \u00b6 OBS","title":"RTMP"},{"location":"users-guide/dj/rtmp/#rtmp","text":"OBS","title":"RTMP"},{"location":"users-guide/dj/zoom/","text":"Zoom \u00b6 Here are the instructions to start Zoom broadcasting via a room. Prerequisites \u00b6 The systems administrator must have enabled Zoom (In the .env file, set ZOOM_ENABLED=1 ). You must have Zoom installed ( https://zoom.us/ ). Zoom Time Limits If you\u2019re not using a paid Zoom account, or your systems administrator has not set up a paid account, there are room time limits for group meetings held in Zoom rooms. (40 minutes at the time of this writing.) Your show will be capped at that length. Walkthrough \u00b6 Create and start a Zoom room. Click on the Meeting Information icon, shown below. In the Meeting Information pop-up, copy the link to the Zoom by clicking Copy Link , shown below. Paste the link into the Room Link input, choose a show length, and click Start Zoom Broadcast Now. As soon as the Broadcast Bot has entered your Zoom room, your show starts, however you must produce make noise for the stream to transition to your show. This way, you can set up your show a little bit early. Just be quiet until you\u2019re ready! Problems with Zoom? If a Broadcast Bot attendee does not enter your Zoom room roughly 15 seconds after you click Start Zoom Broadcast Now , please contact the systems administrator or report a bug with Crazy Arms .","title":"Zoom"},{"location":"users-guide/dj/zoom/#zoom","text":"Here are the instructions to start Zoom broadcasting via a room.","title":"Zoom"},{"location":"users-guide/dj/zoom/#prerequisites","text":"The systems administrator must have enabled Zoom (In the .env file, set ZOOM_ENABLED=1 ). You must have Zoom installed ( https://zoom.us/ ). Zoom Time Limits If you\u2019re not using a paid Zoom account, or your systems administrator has not set up a paid account, there are room time limits for group meetings held in Zoom rooms. (40 minutes at the time of this writing.) Your show will be capped at that length.","title":"Prerequisites"},{"location":"users-guide/dj/zoom/#walkthrough","text":"Create and start a Zoom room. Click on the Meeting Information icon, shown below. In the Meeting Information pop-up, copy the link to the Zoom by clicking Copy Link , shown below. Paste the link into the Room Link input, choose a show length, and click Start Zoom Broadcast Now. As soon as the Broadcast Bot has entered your Zoom room, your show starts, however you must produce make noise for the stream to transition to your show. This way, you can set up your show a little bit early. Just be quiet until you\u2019re ready! Problems with Zoom? If a Broadcast Bot attendee does not enter your Zoom room roughly 15 seconds after you click Start Zoom Broadcast Now , please contact the systems administrator or report a bug with Crazy Arms .","title":"Walkthrough"}]}